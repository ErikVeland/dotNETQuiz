[
  {
    "id": "dotnet-fundamentals-lesson-1",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Introduction to .NET and C#",
    "order": 1,
    "objectives": [
      "Understand the history and evolution of .NET platform",
      "Explain the key features of C# programming language",
      "Set up a development environment for .NET development"
    ],
    "intro": "The .NET platform, initially released by Microsoft in 2002, represents a revolutionary approach to software development that provides a managed execution environment, simplifying application development and deployment. .NET Framework was the original implementation, primarily for Windows, while .NET Core (released in 2016) was a cross-platform, open-source reimplementation that later evolved into .NET 5, 6, and 7.\n\nC# (pronounced \"C Sharp\") is a modern, object-oriented programming language designed specifically for the .NET platform. Created by Anders Hejlsberg, C# combines the power of C++ with the simplicity of Visual Basic. The language has continuously evolved, with C# 11 (released in November 2022) being the latest version at the time of this writing.\n\nUnderstanding .NET and C# is fundamental for modern software development, as they power everything from web applications to cloud services, desktop applications, and mobile apps. According to the Stack Overflow Developer Survey 2022, C# consistently ranks among the top 10 most popular programming languages, with .NET Core/.NET 5+ being among the most loved frameworks.",
    "code": {
      "example": "using System;\n\nnamespace DotNetIntroduction\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Basic console output\n            Console.WriteLine(\"Welcome to .NET Development!\");\n            \n            // String interpolation (C# 6.0+)\n            string name = \"Developer\";\n            Console.WriteLine($\"Hello, {name}! Today is {DateTime.Now:MMMM dd, yyyy}\");\n            \n            // Basic variable declaration and usage\n            int version = 7;\n            Console.WriteLine($\"You're learning .NET {version}\");\n            \n            // Simple method call\n            DisplayFrameworkFeatures();\n        }\n        \n        static void DisplayFrameworkFeatures()\n        {\n            string[] features = {\n                \"Cross-platform support\",\n                \"High performance\",\n                \"Automatic memory management\",\n                \"Rich class library\"\n            };\n            \n            Console.WriteLine(\"\\nKey .NET Features:\");\n            foreach (string feature in features)\n            {\n                Console.WriteLine($\"• {feature}\");\n            }\n        }\n    }\n}",
      "explanation": "This example demonstrates several fundamental concepts of C# and .NET:\n\n1. **Namespace Declaration**: Organizes code into logical groups\n2. **Class and Method Structure**: The Main method is the entry point of all C# applications\n3. **String Interpolation**: Using $\"\" syntax for embedding expressions in strings (C# 6.0+)\n4. **DateTime Formatting**: Displaying dates in a human-readable format\n5. **Array Declaration and Usage**: Creating and iterating through arrays\n6. **foreach Loop**: Modern iteration syntax for collections\n7. **Static Methods**: Methods that belong to the class rather than an instance\n\nWhen executed, this program produces output similar to:\n```\nWelcome to .NET Development!\nHello, Developer! Today is October 02, 2025\nYou're learning .NET 7\n\nKey .NET Features:\n• Cross-platform support\n• High performance\n• Automatic memory management\n• Rich class library\n```",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Using outdated .NET Framework syntax in new .NET projects",
        "solution": "Always use the latest .NET (Core) syntax and project structure. For example, use <Project Sdk=\"Microsoft.NET.Sdk\"> in project files rather than the older .NET Framework project format.",
        "severity": "medium"
      },
      {
        "mistake": "Not understanding the difference between .NET Framework, .NET Core, and .NET 5+",
        "solution": "Recognize that .NET 5+ is the unified future of .NET development. .NET Framework is legacy and only supported on Windows, while .NET Core evolved into modern .NET.",
        "severity": "high"
      },
      {
        "mistake": "Ignoring the importance of the Common Language Runtime (CLR)",
        "solution": "Understand that the CLR provides automatic memory management, exception handling, and security - key benefits of managed code execution.",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Environment Setup and First Application",
        "description": "Install the .NET SDK and create your first console application",
        "checkpoints": [
          "Install the latest .NET SDK from https://dotnet.microsoft.com/download",
          "Create a new console application using 'dotnet new console'",
          "Modify the program to display your name and the current date/time",
          "Add a method that lists three technologies you want to learn"
        ]
      }
    ],
    "next": [
      "dotnet-fundamentals-lesson-2"
    ],
    "estimatedMinutes": 30,
    "difficulty": "Beginner",
    "tags": [
      "Introduction",
      "dotnet",
      "C#",
      "Setup"
    ],
    "sources": [
      {
        "title": "Microsoft .NET Documentation",
        "url": "https://learn.microsoft.com/en-us/dotnet/"
      },
      {
        "title": "C# Programming Guide",
        "url": "https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/"
      }
    ],
    "lastUpdated": "2025-10-02T10:00:00.000Z",
    "version": "1.0.1"
  },
  {
    "id": "dotnet-fundamentals-lesson-2",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Variables and Data Types",
    "order": 2,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Getting Started.\n\nUnderstand different data types in C# including value types, reference types, and how to declare and initialize variables.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Value types\n        int age = 25;\n        double salary = 75000.50;\n        bool isEmployed = true;\n        char grade = 'A';\n        \n        // Reference types\n        string name = \"John Doe\";\n        \n        Console.WriteLine($\"Name: {name}\");\n        Console.WriteLine($\"Age: {age}\");\n        Console.WriteLine($\"Salary: {salary:C}\");\n        Console.WriteLine($\"Is Employed: {isEmployed}\");\n        Console.WriteLine($\"Grade: {grade}\");\n    }\n}",
      "explanation": "This example produces: Name: John Doe\nAge: 25\nSalary: $75,000.50\nIs Employed: True\nGrade: A\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Variables and Data Types",
        "description": "Apply the concepts from this lesson on Getting Started",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Getting Started",
      "dotnet"
    ],
    "legacy": {
      "originalId": 2,
      "originalTopic": "Getting Started",
      "migrated": "2025-10-01T06:41:13.479Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.479Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-3",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Control Flow - Conditional Statements",
    "order": 3,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Core Concepts.\n\nLearn about conditional statements in C# including if-else, switch statements, and ternary operators for decision making.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int score = 85;\n        \n        // If-else statement\n        if (score >= 90)\n        {\n            Console.WriteLine(\"Grade: A\");\n        }\n        else if (score >= 80)\n        {\n            Console.WriteLine(\"Grade: B\");\n        }\n        else if (score >= 70)\n        {\n            Console.WriteLine(\"Grade: C\");\n        }\n        else\n        {\n            Console.WriteLine(\"Grade: F\");\n        }\n        \n        // Ternary operator\n        string result = score >= 60 ? \"Pass\" : \"Fail\";\n        Console.WriteLine($\"Result: {result}\");\n        \n        // Switch statement\n        DayOfWeek today = DateTime.Now.DayOfWeek;\n        switch (today)\n        {\n            case DayOfWeek.Monday:\n                Console.WriteLine(\"Start of work week!\");\n                break;\n            case DayOfWeek.Friday:\n                Console.WriteLine(\"TGIF!\");\n                break;\n            default:\n                Console.WriteLine($\"It's {today}\");\n                break;\n        }\n    }\n}",
      "explanation": "This example produces: Grade: B\nResult: Pass\nIt's [Current Day]\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Control Flow - Conditional Statements",
        "description": "Apply the concepts from this lesson on Core Concepts",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Core Concepts",
      "dotnet"
    ],
    "legacy": {
      "originalId": 3,
      "originalTopic": "Core Concepts",
      "migrated": "2025-10-01T06:41:13.479Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.479Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-4",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Loops and Iteration",
    "order": 4,
    "objectives": [
      "Build foundational understanding",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Core Concepts.\n\nMaster different loop constructs in C# including for, while, do-while, and foreach loops for repetitive tasks.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        // For loop\n        Console.WriteLine(\"For loop:\");\n        for (int i = 1; i <= 5; i++)\n        {\n            Console.WriteLine($\"Count: {i}\");\n        }\n        \n        // While loop\n        Console.WriteLine(\"\\nWhile loop:\");\n        int j = 1;\n        while (j <= 3)\n        {\n            Console.WriteLine($\"While iteration: {j}\");\n            j++;\n        }\n        \n        // Foreach loop\n        Console.WriteLine(\"\\nForeach loop:\");\n        List<string> fruits = new List<string> { \"Apple\", \"Banana\", \"Orange\" };\n        foreach (string fruit in fruits)\n        {\n            Console.WriteLine($\"Fruit: {fruit}\");\n        }\n    }\n}",
      "explanation": "This example produces: For loop:\nCount: 1\nCount: 2\nCount: 3\nCount: 4\nCount: 5\n\nWhile loop:\nWhile iteration: 1\nWhile iteration: 2\nWhile iteration: 3\n\nForeach loop:\nFruit: Apple\nFruit: Banana\nFruit: Orange\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Loops and Iteration",
        "description": "Apply the concepts from this lesson on Core Concepts",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Core Concepts",
      "dotnet"
    ],
    "legacy": {
      "originalId": 4,
      "originalTopic": "Core Concepts",
      "migrated": "2025-10-01T06:41:13.479Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.479Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-5",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Classes and Objects",
    "order": 5,
    "objectives": [
      "Build foundational understanding",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Object-Oriented Programming.\n\nIntroduction to object-oriented programming concepts including classes, objects, constructors, and access modifiers.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "using System;\n\npublic class Person\n{\n    // Fields\n    private string name;\n    private int age;\n    \n    // Constructor\n    public Person(string name, int age)\n    {\n        this.name = name;\n        this.age = age;\n    }\n    \n    // Properties\n    public string Name\n    {\n        get { return name; }\n        set { name = value; }\n    }\n    \n    public int Age\n    {\n        get { return age; }\n        set { age = value >= 0 ? value : 0; }\n    }\n    \n    // Method\n    public void Introduce()\n    {\n        Console.WriteLine($\"Hi, I'm {name} and I'm {age} years old.\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Person person1 = new Person(\"Alice\", 30);\n        Person person2 = new Person(\"Bob\", 25);\n        \n        person1.Introduce();\n        person2.Introduce();\n        \n        // Using properties\n        person1.Age = 31;\n        Console.WriteLine($\"Updated age: {person1.Age}\");\n    }\n}",
      "explanation": "This example produces: Hi, I'm Alice and I'm 30 years old.\nHi, I'm Bob and I'm 25 years old.\nUpdated age: 31\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Classes and Objects",
        "description": "Apply the concepts from this lesson on Object-Oriented Programming",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Beginner",
    "tags": [
      "Object-Oriented Programming",
      "dotnet"
    ],
    "legacy": {
      "originalId": 5,
      "originalTopic": "Object-Oriented Programming",
      "migrated": "2025-10-01T06:41:13.479Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.479Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-6",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Inheritance and Polymorphism",
    "order": 6,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Object-Oriented Programming.\n\nLearn about inheritance, method overriding, virtual methods, and polymorphism in C# to create extensible and maintainable code.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "using System;\n\npublic abstract class Animal\n{\n    public string Name { get; set; }\n    \n    public Animal(string name)\n    {\n        Name = name;\n    }\n    \n    public virtual void MakeSound()\n    {\n        Console.WriteLine($\"{Name} makes a sound\");\n    }\n    \n    public abstract void Move();\n}\n\npublic class Dog : Animal\n{\n    public Dog(string name) : base(name) { }\n    \n    public override void MakeSound()\n    {\n        Console.WriteLine($\"{Name} barks: Woof!\");\n    }\n    \n    public override void Move()\n    {\n        Console.WriteLine($\"{Name} runs on four legs\");\n    }\n}\n\npublic class Bird : Animal\n{\n    public Bird(string name) : base(name) { }\n    \n    public override void MakeSound()\n    {\n        Console.WriteLine($\"{Name} chirps: Tweet!\");\n    }\n    \n    public override void Move()\n    {\n        Console.WriteLine($\"{Name} flies with wings\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Animal[] animals = { new Dog(\"Buddy\"), new Bird(\"Tweety\") };\n        \n        foreach (Animal animal in animals)\n        {\n            animal.MakeSound();\n            animal.Move();\n            Console.WriteLine();\n        }\n    }\n}",
      "explanation": "This example produces: Buddy barks: Woof!\nBuddy runs on four legs\n\nTweety chirps: Tweet!\nTweety flies with wings\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Inheritance and Polymorphism",
        "description": "Apply the concepts from this lesson on Object-Oriented Programming",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Object-Oriented Programming",
      "dotnet"
    ],
    "legacy": {
      "originalId": 6,
      "originalTopic": "Object-Oriented Programming",
      "migrated": "2025-10-01T06:41:13.479Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.479Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-7",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Working with Collections",
    "order": 7,
    "objectives": [
      "Build foundational understanding",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Collections and LINQ.\n\nExplore various collection types in C# including Arrays, Lists, Dictionaries, and their common operations.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        // List<T>\n        List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\n        numbers.Add(6);\n        Console.WriteLine($\"List count: {numbers.Count}\");\n        \n        // Dictionary<TKey, TValue>\n        Dictionary<string, int> ages = new Dictionary<string, int>\n        {\n            { \"Alice\", 30 },\n            { \"Bob\", 25 },\n            { \"Charlie\", 35 }\n        };\n        \n        Console.WriteLine($\"Alice's age: {ages[\"Alice\"]}\");\n        \n        // Array\n        string[] names = { \"Alice\", \"Bob\", \"Charlie\" };\n        Console.WriteLine($\"Array length: {names.Length}\");\n        \n        // Iterating through collections\n        Console.WriteLine(\"\\nNames in dictionary:\");\n        foreach (var kvp in ages)\n        {\n            Console.WriteLine($\"{kvp.Key}: {kvp.Value}\");\n        }\n    }\n}",
      "explanation": "This example produces: List count: 6\nAlice's age: 30\nArray length: 3\n\nNames in dictionary:\nAlice: 30\nBob: 25\nCharlie: 35\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Working with Collections",
        "description": "Apply the concepts from this lesson on Collections and LINQ",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Collections and LINQ",
      "dotnet"
    ],
    "legacy": {
      "originalId": 7,
      "originalTopic": "Collections and LINQ",
      "migrated": "2025-10-01T06:41:13.479Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.479Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-8",
    "moduleSlug": "dotnet-fundamentals",
    "title": "LINQ (Language Integrated Query)",
    "order": 8,
    "objectives": [
      "Build foundational understanding",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Collections and LINQ.\n\nMaster LINQ for querying and manipulating data collections using method syntax and query syntax.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Student\n{\n    public string Name { get; set; }\n    public int Grade { get; set; }\n    public string Subject { get; set; }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        List<Student> students = new List<Student>\n        {\n            new Student { Name = \"Alice\", Grade = 85, Subject = \"Math\" },\n            new Student { Name = \"Bob\", Grade = 92, Subject = \"Science\" },\n            new Student { Name = \"Charlie\", Grade = 78, Subject = \"Math\" },\n            new Student { Name = \"Diana\", Grade = 96, Subject = \"Science\" }\n        };\n        \n        // LINQ Method Syntax\n        var highGrades = students\n            .Where(s => s.Grade >= 90)\n            .Select(s => s.Name)\n            .ToList();\n        \n        Console.WriteLine(\"Students with grades >= 90:\");\n        foreach (var name in highGrades)\n        {\n            Console.WriteLine(name);\n        }\n        \n        // LINQ Query Syntax\n        var mathStudents = from student in students\n                          where student.Subject == \"Math\"\n                          orderby student.Grade descending\n                          select student;\n        \n        Console.WriteLine(\"\\nMath students (by grade):\");\n        foreach (var student in mathStudents)\n        {\n            Console.WriteLine($\"{student.Name}: {student.Grade}\");\n        }\n        \n        // Aggregation\n        double averageGrade = students.Average(s => s.Grade);\n        Console.WriteLine($\"\\nAverage grade: {averageGrade:F1}\");\n    }\n}",
      "explanation": "This example produces: Students with grades >= 90:\nBob\nDiana\n\nMath students (by grade):\nAlice: 85\nCharlie: 78\n\nAverage grade: 87.8\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: LINQ (Language Integrated Query)",
        "description": "Apply the concepts from this lesson on Collections and LINQ",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Collections and LINQ",
      "dotnet"
    ],
    "legacy": {
      "originalId": 8,
      "originalTopic": "Collections and LINQ",
      "migrated": "2025-10-01T06:41:13.479Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.479Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-9",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Exception Handling with Try-Catch",
    "order": 9,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Exception Handling.\n\nLearn how to handle exceptions gracefully using try-catch-finally blocks and custom exceptions.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        try\n        {\n            Console.Write(\"Enter a number: \");\n            string input = \"10\"; // Simulated input\n            int number = int.Parse(input);\n            \n            Console.Write(\"Enter divisor: \");\n            string divisorInput = \"0\"; // Simulated input\n            int divisor = int.Parse(divisorInput);\n            \n            int result = Divide(number, divisor);\n            Console.WriteLine($\"Result: {result}\");\n        }\n        catch (DivideByZeroException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n        }\n        catch (FormatException ex)\n        {\n            Console.WriteLine($\"Invalid input format: {ex.Message}\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Unexpected error: {ex.Message}\");\n        }\n        finally\n        {\n            Console.WriteLine(\"Operation completed.\");\n        }\n    }\n    \n    static int Divide(int a, int b)\n    {\n        if (b == 0)\n            throw new DivideByZeroException(\"Cannot divide by zero!\");\n        return a / b;\n    }\n}",
      "explanation": "This example produces: Enter a number: Enter divisor: Error: Cannot divide by zero!\nOperation completed.\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Exception Handling with Try-Catch",
        "description": "Apply the concepts from this lesson on Exception Handling",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Advanced",
    "tags": [
      "Exception Handling",
      "dotnet"
    ],
    "legacy": {
      "originalId": 9,
      "originalTopic": "Exception Handling",
      "migrated": "2025-10-01T06:41:13.479Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.479Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-10",
    "moduleSlug": "dotnet-fundamentals",
    "title": "File Operations",
    "order": 10,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on File I/O.\n\nLearn how to read from and write to files using various file I/O operations in C#.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "using System;\nusing System.IO;\n\nclass Program\n{\n    static void Main()\n    {\n        string fileName = \"sample.txt\";\n        \n        try\n        {\n            // Writing to file\n            string[] lines = {\n                \"Hello, World!\",\n                \"This is a sample file.\",\n                \"Created with C#\"\n            };\n            \n            File.WriteAllLines(fileName, lines);\n            Console.WriteLine($\"File '{fileName}' created successfully.\");\n            \n            // Reading from file\n            if (File.Exists(fileName))\n            {\n                string[] readLines = File.ReadAllLines(fileName);\n                Console.WriteLine(\"\\nFile contents:\");\n                for (int i = 0; i < readLines.Length; i++)\n                {\n                    Console.WriteLine($\"Line {i + 1}: {readLines[i]}\");\n                }\n            }\n            \n            // File information\n            FileInfo fileInfo = new FileInfo(fileName);\n            Console.WriteLine($\"\\nFile size: {fileInfo.Length} bytes\");\n            Console.WriteLine($\"Created: {fileInfo.CreationTime}\");\n        }\n        catch (IOException ex)\n        {\n            Console.WriteLine($\"File operation error: {ex.Message}\");\n        }\n    }\n}",
      "explanation": "This example produces: File 'sample.txt' created successfully.\n\nFile contents:\nLine 1: Hello, World!\nLine 2: This is a sample file.\nLine 3: Created with C#\n\nFile size: 54 bytes\nCreated: [Current DateTime]\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: File Operations",
        "description": "Apply the concepts from this lesson on File I/O",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "File I/O",
      "dotnet"
    ],
    "legacy": {
      "originalId": 10,
      "originalTopic": "File I/O",
      "migrated": "2025-10-01T06:41:13.479Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.479Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-11",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Asynchronous Programming with async/await",
    "order": 11,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Async Programming.\n\nUnderstand asynchronous programming patterns using async/await keywords for non-blocking operations.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        Console.WriteLine(\"Starting async operations...\");\n        \n        // Simulating multiple async operations\n        Task<string> task1 = SimulateWorkAsync(\"Task 1\", 2000);\n        Task<string> task2 = SimulateWorkAsync(\"Task 2\", 1000);\n        Task<string> task3 = SimulateWorkAsync(\"Task 3\", 1500);\n        \n        // Wait for all tasks to complete\n        string[] results = await Task.WhenAll(task1, task2, task3);\n        \n        Console.WriteLine(\"\\nAll tasks completed:\");\n        foreach (string result in results)\n        {\n            Console.WriteLine(result);\n        }\n        \n        // Sequential vs parallel execution example\n        DateTime start = DateTime.Now;\n        await SequentialExecution();\n        TimeSpan sequentialTime = DateTime.Now - start;\n        \n        start = DateTime.Now;\n        await ParallelExecution();\n        TimeSpan parallelTime = DateTime.Now - start;\n        \n        Console.WriteLine($\"\\nSequential time: {sequentialTime.TotalMilliseconds}ms\");\n        Console.WriteLine($\"Parallel time: {parallelTime.TotalMilliseconds}ms\");\n    }\n    \n    static async Task<string> SimulateWorkAsync(string taskName, int delayMs)\n    {\n        Console.WriteLine($\"{taskName} started\");\n        await Task.Delay(delayMs);\n        Console.WriteLine($\"{taskName} completed\");\n        return $\"{taskName} result\";\n    }\n    \n    static async Task SequentialExecution()\n    {\n        await Task.Delay(500);\n        await Task.Delay(500);\n    }\n    \n    static async Task ParallelExecution()\n    {\n        Task t1 = Task.Delay(500);\n        Task t2 = Task.Delay(500);\n        await Task.WhenAll(t1, t2);\n    }\n}",
      "explanation": "This example produces: Starting async operations...\nTask 1 started\nTask 2 started\nTask 3 started\nTask 2 completed\nTask 3 completed\nTask 1 completed\n\nAll tasks completed:\nTask 1 result\nTask 2 result\nTask 3 result\n\nSequential time: 1000ms\nParallel time: 500ms\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Asynchronous Programming with async/await",
        "description": "Apply the concepts from this lesson on Async Programming",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Async Programming",
      "dotnet"
    ],
    "legacy": {
      "originalId": 11,
      "originalTopic": "Async Programming",
      "migrated": "2025-10-01T06:41:13.479Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.479Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-12",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Delegates and Events",
    "order": 12,
    "objectives": [
      "Implement practical solutions",
      "Build foundational understanding"
    ],
    "intro": "Welcome to this comprehensive lesson on Advanced Features.\n\nLearn about delegates, events, and functional programming concepts in C# for creating flexible and decoupled code.\n\nThroughout this lesson, you'll gain hands-on experience with practical implementations and real-world scenarios. We'll explore both the theoretical foundations and practical applications, ensuring you can immediately apply what you learn.\n\nThis lesson is designed to build upon previous concepts while introducing new techniques that will enhance your development skills. By the end, you'll have a solid understanding of the key principles and be ready to tackle more advanced topics.\n\nThe knowledge gained here will serve as a foundation for subsequent lessons and real-world projects.",
    "code": {
      "example": "using System;\n\n// Delegate declaration\npublic delegate void NotificationHandler(string message);\n\npublic class Publisher\n{\n    // Event based on delegate\n    public event NotificationHandler OnNotification;\n    \n    public void SendNotification(string message)\n    {\n        Console.WriteLine($\"Publishing: {message}\");\n        OnNotification?.Invoke(message);\n    }\n}\n\npublic class Subscriber\n{\n    public string Name { get; set; }\n    \n    public Subscriber(string name)\n    {\n        Name = name;\n    }\n    \n    public void HandleNotification(string message)\n    {\n        Console.WriteLine($\"{Name} received: {message}\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Publisher publisher = new Publisher();\n        \n        Subscriber sub1 = new Subscriber(\"Alice\");\n        Subscriber sub2 = new Subscriber(\"Bob\");\n        \n        // Subscribe to event\n        publisher.OnNotification += sub1.HandleNotification;\n        publisher.OnNotification += sub2.HandleNotification;\n        \n        // Anonymous method\n        publisher.OnNotification += (msg) => Console.WriteLine($\"Anonymous: {msg}\");\n        \n        // Trigger events\n        publisher.SendNotification(\"Hello World!\");\n        publisher.SendNotification(\"Another message\");\n        \n        // Unsubscribe\n        publisher.OnNotification -= sub1.HandleNotification;\n        \n        Console.WriteLine(\"\\nAfter unsubscribing Alice:\");\n        publisher.SendNotification(\"Final message\");\n    }\n}",
      "explanation": "This example produces: Publishing: Hello World!\nAlice received: Hello World!\nBob received: Hello World!\nAnonymous: Hello World!\nPublishing: Another message\nAlice received: Another message\nBob received: Another message\nAnonymous: Another message\n\nAfter unsubscribing Alice:\nPublishing: Final message\nBob received: Final message\nAnonymous: Final message\n\nThe code demonstrates practical implementation techniques and shows how the concepts work in real scenarios. Pay attention to the structure and patterns used, as these represent industry best practices.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not following best practices",
        "solution": "Review documentation and community guidelines",
        "severity": "medium"
      },
      {
        "mistake": "Skipping error handling",
        "solution": "Implement proper error boundaries and validation",
        "severity": "low"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Delegates and Events",
        "description": "Apply the concepts from this lesson on Advanced Features",
        "checkpoints": [
          "Understand the core concept",
          "Implement the example code",
          "Experiment with variations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 25,
    "difficulty": "Intermediate",
    "tags": [
      "Advanced Features",
      "dotnet"
    ],
    "legacy": {
      "originalId": 12,
      "originalTopic": "Advanced Features",
      "migrated": "2025-10-01T06:41:13.479Z"
    },
    "lastUpdated": "2025-10-01T06:41:13.479Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-13",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Methods and Functions",
    "order": 13,
    "objectives": [
      "Understand method declaration and invocation",
      "Learn about parameters, return types, and overloading",
      "Implement static and instance methods"
    ],
    "intro": "Welcome to this comprehensive lesson on Methods and Functions in .NET.\n\nMethods are fundamental building blocks of C# programming that allow you to organize code into reusable units. In this lesson, you'll learn how to create, call, and optimize methods for better code organization.\n\nThroughout this lesson, you'll gain hands-on experience with method signatures, parameter passing, return values, and method overloading. We'll explore both static and instance methods, understanding when to use each approach.\n\nThis lesson builds upon previous concepts of data types and control flow, showing how to encapsulate logic into maintainable functions. By the end, you'll be able to design clean, reusable methods that follow C# best practices.",
    "code": {
      "example": "using System;\n\nclass Calculator\n{\n    public static int Add(int a, int b)\n    {\n        return a + b;\n    }\n    \n    public double CalculateArea(double radius)\n    {\n        return Math.PI * radius * radius;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        int sum = Calculator.Add(5, 3);\n        Console.WriteLine($\"Sum: {sum}\");\n        \n        Calculator calc = new Calculator();\n        double area = calc.CalculateArea(5.0);\n        Console.WriteLine($\"Area: {area:F2}\");\n    }\n}",
      "explanation": "This example demonstrates method declaration and invocation. The output shows: Sum: 8, Area: 78.54",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Creating methods that do too much",
        "solution": "Break large methods into smaller, focused methods",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Methods and Functions",
        "description": "Create utility methods for mathematical operations",
        "checkpoints": [
          "Create static methods for basic math operations",
          "Implement instance methods with validation"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 30,
    "difficulty": "Intermediate",
    "tags": [
      "Methods",
      "Functions",
      "dotnet"
    ],
    "lastUpdated": "2025-10-01T18:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-14",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Object-Oriented Programming Basics",
    "order": 14,
    "objectives": [
      "Understand classes, objects, and instantiation",
      "Learn about properties, fields, and encapsulation",
      "Implement constructors and object lifecycle"
    ],
    "intro": "Welcome to Object-Oriented Programming Basics in .NET.\n\nObject-Oriented Programming (OOP) is a fundamental paradigm in C# that allows you to model real-world entities as objects with properties and behaviors. This lesson introduces the core concepts of classes and objects.\n\nYou'll learn how to design classes, create objects, and implement encapsulation through properties and access modifiers. Understanding OOP is crucial for building maintainable and scalable applications.",
    "code": {
      "example": "using System;\n\nclass Person\n{\n    private string _name;\n    private int _age;\n    \n    public string Name\n    {\n        get { return _name; }\n        set { _name = value; }\n    }\n    \n    public int Age\n    {\n        get { return _age; }\n        set { _age = value; }\n    }\n    \n    public Person(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n    \n    public void Introduce()\n    {\n        Console.WriteLine($\"Hi, I'm {Name}, {Age} years old.\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Person person = new Person(\"Alice\", 25);\n        person.Introduce();\n    }\n}",
      "explanation": "This example demonstrates class definition, properties, constructors, and object instantiation.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Making all fields public",
        "solution": "Use private fields with public properties",
        "severity": "high"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Object-Oriented Programming",
        "description": "Create a BankAccount class with proper encapsulation",
        "checkpoints": [
          "Design a class with private fields and public properties",
          "Implement constructors with validation"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 35,
    "difficulty": "Intermediate",
    "tags": [
      "OOP",
      "Classes",
      "Objects",
      "dotnet"
    ],
    "lastUpdated": "2025-10-01T18:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-15",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Collections and Arrays",
    "order": 15,
    "objectives": [
      "Master arrays and their operations",
      "Understand List<T> and generic collections",
      "Learn Dictionary and specialized collections"
    ],
    "intro": "Welcome to Collections and Arrays in .NET.\n\nCollections are essential for storing and manipulating groups of related data. This lesson covers arrays, generic collections, and specialized data structures.\n\nYou'll learn about different collection types, their performance characteristics, and when to use each one. Collections are fundamental to most real-world applications.",
    "code": {
      "example": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] numbers = { 1, 2, 3, 4, 5 };\n        \n        List<string> fruits = new List<string>();\n        fruits.Add(\"Apple\");\n        fruits.Add(\"Banana\");\n        \n        Dictionary<string, int> ages = new Dictionary<string, int>\n        {\n            { \"Alice\", 25 },\n            { \"Bob\", 30 }\n        };\n        \n        var evenNumbers = numbers.Where(n => n % 2 == 0).ToList();\n        Console.WriteLine($\"Even numbers: {string.Join(\", \", evenNumbers)}\");\n    }\n}",
      "explanation": "This example demonstrates arrays, List<T>, Dictionary, and LINQ operations.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Using arrays when List<T> would be better",
        "solution": "Use List<T> for dynamic collections",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Collections and Arrays",
        "description": "Build a student management system using collections",
        "checkpoints": [
          "Use arrays for fixed data and List<T> for dynamic data",
          "Apply LINQ operations for data filtering"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 40,
    "difficulty": "Intermediate",
    "tags": [
      "Collections",
      "Arrays",
      "LINQ",
      "dotnet"
    ],
    "lastUpdated": "2025-10-01T18:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-16",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Exception Handling",
    "order": 16,
    "objectives": [
      "Understand exception types and hierarchy",
      "Implement try-catch-finally blocks",
      "Create custom exceptions"
    ],
    "intro": "Welcome to Exception Handling in .NET.\n\nException handling is crucial for building robust applications that can gracefully handle errors. This lesson covers the .NET exception system and best practices.\n\nYou'll learn about different exception types, how to catch and handle them appropriately, and when to create custom exceptions.",
    "code": {
      "example": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        try\n        {\n            int result = 10 / 0;\n        }\n        catch (DivideByZeroException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n        }\n        finally\n        {\n            Console.WriteLine(\"Cleanup completed\");\n        }\n        \n        try\n        {\n            ValidateAge(-5);\n        }\n        catch (ArgumentException ex)\n        {\n            Console.WriteLine($\"Validation error: {ex.Message}\");\n        }\n    }\n    \n    static void ValidateAge(int age)\n    {\n        if (age < 0)\n            throw new ArgumentException(\"Age cannot be negative\");\n    }\n}",
      "explanation": "This example demonstrates try-catch-finally blocks and custom exception throwing.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Catching all exceptions generically",
        "solution": "Catch specific exception types first",
        "severity": "high"
      }
    ],
    "exercises": [
      {
        "title": "Practice: Exception Handling",
        "description": "Create a calculator with comprehensive error handling",
        "checkpoints": [
          "Handle division by zero and invalid input",
          "Create custom exceptions for business rules"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 35,
    "difficulty": "Intermediate",
    "tags": [
      "Exception Handling",
      "Error Management",
      "dotnet"
    ],
    "lastUpdated": "2025-10-01T18:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-17",
    "moduleSlug": "dotnet-fundamentals",
    "title": "File I/O and Streams",
    "order": 17,
    "objectives": [
      "Master file reading and writing operations",
      "Understand streams and their types",
      "Implement async file operations"
    ],
    "intro": "Welcome to File I/O and Streams in .NET.\n\nFile input/output operations are essential for applications that need to persist data or process external data sources. This lesson covers the .NET file system APIs.\n\nYou'll learn about different ways to read and write files, work with streams for efficient data processing, and implement asynchronous file operations.",
    "code": {
      "example": "using System;\nusing System.IO;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        string filename = \"sample.txt\";\n        \n        // Writing to file\n        string[] lines = { \"Line 1\", \"Line 2\", \"Line 3\" };\n        await File.WriteAllLinesAsync(filename, lines);\n        \n        // Reading from file\n        if (File.Exists(filename))\n        {\n            string content = await File.ReadAllTextAsync(filename);\n            Console.WriteLine($\"File content:\\n{content}\");\n        }\n        \n        // Working with streams\n        using (StreamWriter writer = new StreamWriter(\"stream.txt\"))\n        {\n            await writer.WriteLineAsync(\"Stream content\");\n        }\n    }\n}",
      "explanation": "This example demonstrates file I/O operations including async methods and stream usage.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not disposing file streams properly",
        "solution": "Always use 'using' statements for resource management",
        "severity": "high"
      }
    ],
    "exercises": [
      {
        "title": "Practice: File I/O and Streams",
        "description": "Build a log file analyzer",
        "checkpoints": [
          "Read large files using streams efficiently",
          "Implement async file operations"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 40,
    "difficulty": "Intermediate",
    "tags": [
      "File I/O",
      "Streams",
      "Async",
      "dotnet"
    ],
    "lastUpdated": "2025-10-01T18:00:00.000Z",
    "version": "1.0.0"
  },
  {
    "id": "dotnet-fundamentals-lesson-18",
    "moduleSlug": "dotnet-fundamentals",
    "title": "Introduction to ASP.NET Core",
    "order": 18,
    "objectives": [
      "Understand ASP.NET Core architecture",
      "Create your first web application",
      "Learn about MVC pattern and routing"
    ],
    "intro": "Welcome to ASP.NET Core web development - a transformative journey into modern, cross-platform web application development with Microsoft's most advanced framework. ASP.NET Core represents a complete reimagining of web development on the .NET platform, offering unprecedented performance, flexibility, and developer productivity.\n\nASP.NET Core is built from the ground up as a high-performance, cross-platform framework that runs on Windows, macOS, and Linux. Unlike its predecessor ASP.NET Framework, ASP.NET Core is modular, lightweight, and designed for cloud-native applications. This architectural shift enables developers to build applications that scale efficiently and deploy anywhere.\n\nIn this comprehensive lesson, you'll master the fundamental concepts that make ASP.NET Core exceptional: the Model-View-Controller (MVC) pattern, dependency injection, middleware pipeline, and routing system. These concepts form the backbone of professional web development and are essential for building maintainable, testable applications.\n\nThe MVC pattern separates concerns beautifully - Models handle data and business logic, Views manage presentation, and Controllers coordinate user interactions. This separation enables teams to work efficiently and makes applications easier to test and maintain. You'll see how ASP.NET Core's implementation of MVC provides powerful features while maintaining simplicity.\n\nBy the end of this lesson, you'll confidently create web applications, implement routing strategies, handle HTTP requests and responses, and understand the request pipeline that makes ASP.NET Core applications so performant. This knowledge forms the foundation for building everything from simple websites to complex enterprise applications.",
    "code": {
      "example": "using Microsoft.AspNetCore.Mvc;\n\nnamespace WebApp.Controllers\n{\n    public class HomeController : Controller\n    {\n        public IActionResult Index()\n        {\n            ViewBag.Message = \"Welcome to ASP.NET Core!\";\n            return View();\n        }\n        \n        public IActionResult About()\n        {\n            return View();\n        }\n        \n        [HttpPost]\n        public IActionResult Contact(string name, string email)\n        {\n            ViewBag.Name = name;\n            ViewBag.Email = email;\n            return View();\n        }\n    }\n}\n\n// Program.cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllersWithViews();\n\nvar app = builder.Build();\napp.UseRouting();\napp.MapControllerRoute(\n    name: \"default\",\n    pattern: \"{controller=Home}/{action=Index}/{id?}\");\n\napp.Run();",
      "explanation": "This example shows a basic ASP.NET Core MVC controller with actions and routing configuration.",
      "language": "csharp"
    },
    "pitfalls": [
      {
        "mistake": "Not understanding the request pipeline",
        "solution": "Learn about middleware and the ASP.NET Core pipeline",
        "severity": "medium"
      }
    ],
    "exercises": [
      {
        "title": "Practice: ASP.NET Core Basics",
        "description": "Create a simple web application with multiple pages",
        "checkpoints": [
          "Set up a new ASP.NET Core project",
          "Create controllers and views for different pages"
        ]
      }
    ],
    "next": [],
    "estimatedMinutes": 45,
    "difficulty": "Intermediate",
    "tags": [
      "ASP.NET Core",
      "Web Development",
      "MVC",
      "dotnet"
    ],
    "lastUpdated": "2025-10-01T18:00:00.000Z",
    "version": "1.0.0"
  }
]