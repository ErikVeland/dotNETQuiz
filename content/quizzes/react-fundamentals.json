{
  "moduleSlug": "react-fundamentals",
  "title": "React Fundamentals Assessment",
  "description": "Comprehensive assessment covering key concepts from the react-fundamentals module",
  "totalQuestions": 20,
  "passingScore": 70,
  "timeLimit": 23,
  "questions": [
    {
      "id": "react-fundamentals-q1",
      "question": "What is the correct way to create a React component?",
      "topic": "Components",
      "difficulty": "Beginner",
      "choices": [
        "function MyComponent() { return <div>Hello</div>; }",
        "class MyComponent { render() { return <div>Hello</div>; } }",
        "MyComponent() => { return <div>Hello</div>; }",
        "const MyComponent = { <div>Hello</div> }"
      ],
      "correctIndex": 0,
      "explanation": "In modern React, functional components are the preferred way to create components. They are simpler and can use hooks for state and side effects.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Components",
        "beginner",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "legacy": {
        "originalId": 1,
        "originalType": "multiple-choice",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q2",
      "question": "How do you pass data to a React component?",
      "topic": "Components",
      "difficulty": "Beginner",
      "choices": [
        "Using props",
        "Using state",
        "Using context",
        "Using refs"
      ],
      "correctIndex": 0,
      "explanation": "Props are used to pass data from a parent component to a child component in React.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Components",
        "beginner",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "legacy": {
        "originalId": 2,
        "originalType": "multiple-choice",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q3",
      "question": "What are React Hooks and why were they introduced?",
      "topic": "Hooks",
      "difficulty": "Intermediate",
      "choices": [
        "Open-ended question - no multiple choice",
        "This is a conceptual question",
        "Answer requires explanation",
        "Multiple approaches possible"
      ],
      "correctIndex": 0,
      "explanation": "React Hooks are functions that let you 'hook into' React state and lifecycle features from function components. They were introduced to allow using state and other React features without writing a class, making components simpler and easier to reuse.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Hooks",
        "intermediate",
        "react"
      ],
      "questionType": "open-ended",
      "estimatedTime": 180,
      "legacy": {
        "originalId": 3,
        "originalType": "open-ended",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q4",
      "question": "Which hook is used to manage state in a functional component?",
      "topic": "Hooks",
      "difficulty": "Intermediate",
      "choices": [
        "useState",
        "useEffect",
        "useContext",
        "useReducer"
      ],
      "correctIndex": 0,
      "explanation": "The useState hook is used to add state to functional components in React.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Hooks",
        "intermediate",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "legacy": {
        "originalId": 4,
        "originalType": "multiple-choice",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q5",
      "question": "What is the purpose of React Context?",
      "topic": "Context",
      "difficulty": "Beginner",
      "choices": [
        "To share data between components without prop drilling",
        "To manage component state",
        "To handle side effects",
        "To optimize component performance"
      ],
      "correctIndex": 0,
      "explanation": "React Context provides a way to pass data through the component tree without having to pass props down manually at every level.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Context",
        "beginner",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "legacy": {
        "originalId": 5,
        "originalType": "multiple-choice",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q6",
      "question": "Which method is called after a component is rendered for the first time?",
      "topic": "Lifecycle",
      "difficulty": "Intermediate",
      "choices": [
        "componentDidMount",
        "componentDidUpdate",
        "componentWillUnmount",
        "render"
      ],
      "correctIndex": 0,
      "explanation": "componentDidMount is called immediately after a component is mounted (inserted into the tree).",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Lifecycle",
        "intermediate",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "legacy": {
        "originalId": 6,
        "originalType": "multiple-choice",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q7",
      "question": "What is the virtual DOM and how does it improve React performance?",
      "topic": "Rendering",
      "difficulty": "Beginner",
      "choices": [
        "Open-ended question - no multiple choice",
        "This is a conceptual question",
        "Answer requires explanation",
        "Multiple approaches possible"
      ],
      "correctIndex": 0,
      "explanation": "The virtual DOM is a lightweight JavaScript representation of the actual DOM. React uses it to optimize updates by comparing the virtual DOM with the real DOM and only updating the parts that have changed, reducing expensive DOM operations.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Rendering",
        "beginner",
        "react"
      ],
      "questionType": "open-ended",
      "estimatedTime": 180,
      "legacy": {
        "originalId": 7,
        "originalType": "open-ended",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q8",
      "question": "How do you update state in a functional component?",
      "topic": "State",
      "difficulty": "Beginner",
      "choices": [
        "Using the setter function returned by useState",
        "Directly modifying the state variable",
        "Using this.setState",
        "Using forceUpdate"
      ],
      "correctIndex": 0,
      "explanation": "When using useState, you get a state variable and a setter function. You must use the setter function to update state.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "State",
        "beginner",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "legacy": {
        "originalId": 8,
        "originalType": "multiple-choice",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q9",
      "question": "What is the purpose of useCallback hook?",
      "topic": "Hooks",
      "difficulty": "Beginner",
      "choices": [
        "Memoize functions to prevent unnecessary re-renders",
        "Cache API responses",
        "Handle user callbacks",
        "Create callback refs"
      ],
      "correctIndex": 0,
      "explanation": "useCallback memoizes functions to prevent unnecessary re-renders of child components when the parent re-renders, optimizing performance by maintaining referential equality.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Hooks",
        "beginner",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "legacy": {
        "originalId": 9,
        "originalType": "multiple-choice",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q10",
      "question": "What does React.memo() do?",
      "topic": "Performance",
      "difficulty": "Intermediate",
      "choices": [
        "Prevents re-renders if props haven't changed",
        "Memoizes state values",
        "Caches API calls",
        "Optimizes memory usage"
      ],
      "correctIndex": 0,
      "explanation": "React.memo() is a higher-order component that memoizes the component and only re-renders if its props have changed, improving performance.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Performance",
        "intermediate",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "legacy": {
        "originalId": 10,
        "originalType": "multiple-choice",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q11",
      "question": "When should you use useReducer instead of useState?",
      "topic": "State Management",
      "difficulty": "Intermediate",
      "choices": [
        "Open-ended question - no multiple choice",
        "This is a conceptual question",
        "Answer requires explanation",
        "Multiple approaches possible"
      ],
      "correctIndex": 0,
      "explanation": "Use useReducer when: state logic is complex with multiple sub-values, next state depends on previous state, you have complex state transitions, managing state that involves multiple actions, or when you need more predictable state updates.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "State Management",
        "intermediate",
        "react"
      ],
      "questionType": "open-ended",
      "estimatedTime": 180,
      "legacy": {
        "originalId": 11,
        "originalType": "open-ended",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q12",
      "question": "Which library is commonly used for testing React components?",
      "topic": "Testing",
      "difficulty": "Intermediate",
      "choices": [
        "React Testing Library",
        "Selenium",
        "JUnit",
        "PHPUnit"
      ],
      "correctIndex": 0,
      "explanation": "React Testing Library is the most popular choice for testing React components, focusing on testing behavior rather than implementation details.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Testing",
        "intermediate",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "legacy": {
        "originalId": 12,
        "originalType": "multiple-choice",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q13",
      "question": "What is an Error Boundary in React?",
      "topic": "Error Handling",
      "difficulty": "Beginner",
      "choices": [
        "A component that catches JavaScript errors in child components",
        "A validation method for props",
        "A routing mechanism",
        "A state management tool"
      ],
      "correctIndex": 0,
      "explanation": "Error Boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Error Handling",
        "beginner",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "legacy": {
        "originalId": 13,
        "originalType": "multiple-choice",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q14",
      "question": "What are React Portals and when would you use them?",
      "topic": "Advanced",
      "difficulty": "Intermediate",
      "choices": [
        "Open-ended question - no multiple choice",
        "This is a conceptual question",
        "Answer requires explanation",
        "Multiple approaches possible"
      ],
      "correctIndex": 0,
      "explanation": "React Portals provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Use them for modals, tooltips, or dropdowns that need to escape parent containers with overflow:hidden or z-index stacking contexts.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Advanced",
        "intermediate",
        "react"
      ],
      "questionType": "open-ended",
      "estimatedTime": 180,
      "legacy": {
        "originalId": 14,
        "originalType": "open-ended",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q15",
      "question": "What is React Suspense used for?",
      "topic": "Concurrency",
      "difficulty": "Beginner",
      "choices": [
        "Handling loading states for async operations",
        "Suspending component updates",
        "Pausing animations",
        "Managing timeouts"
      ],
      "correctIndex": 0,
      "explanation": "React Suspense lets components 'wait' for something before rendering, typically used with lazy loading and data fetching to handle loading states declaratively.",
      "industryContext": "React is widely used in enterprise applications for building scalable user interfaces.",
      "tags": [
        "Concurrency",
        "beginner",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90,
      "legacy": {
        "originalId": 15,
        "originalType": "multiple-choice",
        "migrated": "2025-10-01T06:41:13.477Z"
      }
    },
    {
      "id": "react-fundamentals-q16",
      "question": "What is the difference between React.lazy() and dynamic imports in React?",
      "topic": "Code Splitting",
      "difficulty": "Advanced",
      "choices": [
        "React.lazy() is specifically for React components, dynamic imports are for any module",
        "React.lazy() works only with default exports, dynamic imports work with named exports",
        "React.lazy() requires Suspense, dynamic imports don't",
        "All of the above"
      ],
      "correctIndex": 3,
      "explanation": "All statements are correct: React.lazy() is designed specifically for React components and requires default exports, it must be wrapped with Suspense for loading states, while dynamic imports are more general-purpose for any module type.",
      "industryContext": "Code splitting is essential for large-scale React applications to improve loading performance and user experience.",
      "tags": [
        "Code Splitting",
        "advanced",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 120
    },
    {
      "id": "react-fundamentals-q17",
      "question": "When implementing Error Boundaries, which lifecycle methods should you use?",
      "topic": "Error Handling",
      "difficulty": "Advanced",
      "choices": [
        "componentDidCatch() only",
        "getDerivedStateFromError() only",
        "Both getDerivedStateFromError() and componentDidCatch()",
        "componentDidMount() and componentDidUpdate()"
      ],
      "correctIndex": 2,
      "explanation": "Error Boundaries should use both getDerivedStateFromError() to update state and trigger fallback UI, and componentDidCatch() to log error information and perform side effects.",
      "industryContext": "Proper error handling is crucial for production React applications to provide good user experience and debugging capabilities.",
      "tags": [
        "Error Handling",
        "advanced",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 120
    },
    {
      "id": "react-fundamentals-q18",
      "question": "What are the key considerations when deploying a React application to production?",
      "topic": "Deployment",
      "difficulty": "Advanced",
      "choices": [
        "Open-ended question - no multiple choice",
        "This is a conceptual question",
        "Answer requires explanation",
        "Multiple approaches possible"
      ],
      "correctIndex": 0,
      "explanation": "Key considerations include: optimizing bundle size (code splitting, tree shaking), implementing security headers and CSP, setting up error tracking and monitoring, configuring proper caching strategies, disabling source maps, implementing CI/CD pipelines, and ensuring performance meets Core Web Vitals standards.",
      "industryContext": "Production deployment requires careful consideration of performance, security, and monitoring to ensure reliable user experience.",
      "tags": [
        "Deployment",
        "advanced",
        "react"
      ],
      "questionType": "open-ended",
      "estimatedTime": 180
    },
    {
      "id": "react-fundamentals-q19",
      "question": "Which React feature allows you to render components outside their parent DOM hierarchy?",
      "topic": "Advanced",
      "difficulty": "Intermediate",
      "choices": [
        "React Portals",
        "React Context",
        "React Fragments",
        "React Suspense"
      ],
      "correctIndex": 0,
      "explanation": "React Portals provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component, useful for modals, tooltips, and dropdowns.",
      "industryContext": "Portals are commonly used in enterprise applications for creating overlay components that need to escape parent container constraints.",
      "tags": [
        "Advanced",
        "intermediate",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90
    },
    {
      "id": "react-fundamentals-q20",
      "question": "What is the purpose of React.StrictMode and when should you use it?",
      "topic": "Development Tools",
      "difficulty": "Intermediate",
      "choices": [
        "To enforce stricter TypeScript checking",
        "To identify side effects and deprecated features during development",
        "To improve performance in production",
        "To enable concurrent rendering features"
      ],
      "correctIndex": 1,
      "explanation": "React.StrictMode is a development tool that helps identify side effects, unsafe lifecycles, and deprecated features by intentionally double-invoking functions and methods during development.",
      "industryContext": "StrictMode is essential for maintaining code quality and preparing applications for future React features like concurrent rendering.",
      "tags": [
        "Development Tools",
        "intermediate",
        "react"
      ],
      "questionType": "multiple-choice",
      "estimatedTime": 90
    }
  ],
  "metadata": {
    "migrated": true,
    "originalQuestionCount": 15,
    "migrationDate": "2025-10-01T06:41:13.477Z",
    "lastUpdated": "2025-10-01T06:41:13.477Z",
    "version": "1.0.0"
  }
}