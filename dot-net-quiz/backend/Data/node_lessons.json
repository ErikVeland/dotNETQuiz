[
  {
    "id": 1,
    "topic": "Basics",
    "title": "Introduction to Node.js",
    "description": "Learn the fundamentals of Node.js and how it enables server-side JavaScript.",
    "codeExample": "// Basic Node.js server\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World!');\n});\n\nserver.listen(3000, '127.0.0.1', () => {\n  console.log('Server running at http://127.0.0.1:3000/');\n});",
    "output": "Server running at http://127.0.0.1:3000/"
  },
  {
    "id": 2,
    "topic": "Basics",
    "title": "Node.js Modules",
    "description": "Learn how to create and use modules in Node.js.",
    "codeExample": "// math.js\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction subtract(a, b) {\n  return a - b;\n}\n\nmodule.exports = { add, subtract };\n\n// app.js\nconst { add, subtract } = require('./math');\n\nconsole.log(add(5, 3)); // 8\nconsole.log(subtract(5, 3)); // 2",
    "output": "8\n2"
  },
  {
    "id": 3,
    "topic": "Express",
    "title": "Building REST APIs with Express",
    "description": "Learn how to create RESTful APIs using the Express.js framework.",
    "codeExample": "const express = require('express');\nconst app = express();\n\n// Middleware to parse JSON\napp.use(express.json());\n\n// GET request\napp.get('/users', (req, res) => {\n  res.json([{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }]);\n});\n\n// POST request\napp.post('/users', (req, res) => {\n  const user = req.body;\n  res.status(201).json({ id: 3, ...user });\n});\n\napp.listen(3000, () => console.log('Server started on port 3000'));",
    "output": "Server started on port 3000"
  },
  {
    "id": 4,
    "topic": "Express",
    "title": "Middleware in Express",
    "description": "Learn how to use and create middleware functions in Express.js.",
    "codeExample": "const express = require('express');\nconst app = express();\n\n// Custom middleware\nconst logger = (req, res, next) => {\n  console.log(`${req.method} ${req.url}`);\n  next();\n};\n\n// Application-level middleware\napp.use(logger);\n\n// Route-specific middleware\nconst auth = (req, res, next) => {\n  const token = req.header('Authorization');\n  if (token === 'secret-token') {\n    next();\n  } else {\n    res.status(401).json({ error: 'Unauthorized' });\n  }\n};\n\napp.get('/protected', auth, (req, res) => {\n  res.json({ message: 'Protected data' });\n});",
    "output": "GET /protected\n401 {\"error\": \"Unauthorized\"} (without token) or 200 {\"message\": \"Protected data\"} (with token)"
  },
  {
    "id": 5,
    "topic": "Database",
    "title": "Working with Databases in Node.js",
    "description": "Learn how to connect and interact with databases using Node.js.",
    "codeExample": "const { MongoClient } = require('mongodb');\n\nasync function main() {\n  const uri = 'mongodb://localhost:27017';\n  const client = new MongoClient(uri);\n  \n  try {\n    await client.connect();\n    const database = client.db('myDatabase');\n    const collection = database.collection('users');\n    \n    // Insert a document\n    const user = { name: 'John', email: 'john@example.com' };\n    const result = await collection.insertOne(user);\n    console.log(`New user created with id: ${result.insertedId}`);\n    \n    // Find documents\n    const users = await collection.find({}).toArray();\n    console.log('Users:', users);\n  } finally {\n    await client.close();\n  }\n}\n\nmain().catch(console.error);",
    "output": "New user created with id: [ObjectId]\nUsers: [{ name: 'John', email: 'john@example.com' }]"
  },
  {
    "id": 6,
    "topic": "Async Programming",
    "title": "Promises and Async/Await",
    "description": "Master asynchronous programming patterns in Node.js using Promises and async/await.",
    "codeExample": "// Promise-based function\nfunction fetchData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Data fetched successfully');\n    }, 1000);\n  });\n}\n\n// Using async/await\nasync function getData() {\n  try {\n    const data = await fetchData();\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\n// Using Promises\nfetchData()\n  .then(data => console.log(data))\n  .catch(error => console.error(error));\n\ngetData();",
    "output": "Data fetched successfully\nData fetched successfully"
  },
  {
    "id": 7,
    "topic": "File System",
    "title": "File System Operations",
    "description": "Learn how to work with files and directories using Node.js fs module.",
    "codeExample": "const fs = require('fs').promises;\nconst path = require('path');\n\nasync function fileOperations() {\n  try {\n    // Write to file\n    await fs.writeFile('example.txt', 'Hello Node.js!');\n    console.log('File written successfully');\n    \n    // Read from file\n    const data = await fs.readFile('example.txt', 'utf8');\n    console.log('File content:', data);\n    \n    // Check if file exists\n    try {\n      await fs.access('example.txt');\n      console.log('File exists');\n    } catch {\n      console.log('File does not exist');\n    }\n    \n    // Delete file\n    await fs.unlink('example.txt');\n    console.log('File deleted');\n  } catch (error) {\n    console.error('File operation error:', error);\n  }\n}\n\nfileOperations();",
    "output": "File written successfully\nFile content: Hello Node.js!\nFile exists\nFile deleted"
  },
  {
    "id": 8,
    "topic": "Error Handling",
    "title": "Error Handling and Debugging",
    "description": "Learn best practices for error handling and debugging in Node.js applications.",
    "codeExample": "// Custom error class\nclass ValidationError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\n// Function with error handling\nfunction validateUser(user) {\n  if (!user.name) {\n    throw new ValidationError('Name is required');\n  }\n  if (!user.email) {\n    throw new ValidationError('Email is required');\n  }\n  return true;\n}\n\n// Express error middleware\nfunction errorHandler(err, req, res, next) {\n  console.error(err.stack);\n  \n  if (err instanceof ValidationError) {\n    return res.status(400).json({ error: err.message });\n  }\n  \n  res.status(500).json({ error: 'Internal server error' });\n}\n\n// Usage example\ntry {\n  validateUser({ name: 'John' }); // Missing email\n} catch (error) {\n  console.log('Caught error:', error.message);\n}",
    "output": "Caught error: Email is required"
  },
  {
    "id": 9,
    "topic": "Streams",
    "title": "Working with Streams",
    "description": "Learn how to handle large data efficiently using Node.js streams.",
    "codeExample": "const fs = require('fs');\nconst { Transform } = require('stream');\n\n// Create a transform stream\nconst upperCaseTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    this.push(chunk.toString().toUpperCase());\n    callback();\n  }\n});\n\n// Reading and transforming data with streams\nfunction processLargeFile() {\n  const readStream = fs.createReadStream('input.txt');\n  const writeStream = fs.createWriteStream('output.txt');\n  \n  readStream\n    .pipe(upperCaseTransform)\n    .pipe(writeStream)\n    .on('finish', () => {\n      console.log('File processing completed');\n    })\n    .on('error', (error) => {\n      console.error('Stream error:', error);\n    });\n}\n\n// Create readable stream from array\nconst { Readable } = require('stream');\n\nconst arrayStream = new Readable({\n  read() {\n    this.push('data chunk ');\n    this.push(null); // End the stream\n  }\n});\n\narrayStream.on('data', (chunk) => {\n  console.log('Received:', chunk.toString());\n});",
    "output": "Received: data chunk \nFile processing completed"
  },
  {
    "id": 10,
    "topic": "Testing",
    "title": "Testing with Jest",
    "description": "Learn how to write and run tests for Node.js applications using Jest.",
    "codeExample": "// math.js\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction divide(a, b) {\n  if (b === 0) {\n    throw new Error('Division by zero');\n  }\n  return a / b;\n}\n\nmodule.exports = { add, divide };\n\n// math.test.js\nconst { add, divide } = require('./math');\n\ndescribe('Math functions', () => {\n  test('adds 1 + 2 to equal 3', () => {\n    expect(add(1, 2)).toBe(3);\n  });\n  \n  test('divides 10 / 2 to equal 5', () => {\n    expect(divide(10, 2)).toBe(5);\n  });\n  \n  test('throws error on division by zero', () => {\n    expect(() => divide(10, 0)).toThrow('Division by zero');\n  });\n  \n  test('async test example', async () => {\n    const result = await Promise.resolve(42);\n    expect(result).toBe(42);\n  });\n});",
    "output": "PASS math.test.js\n✓ adds 1 + 2 to equal 3\n✓ divides 10 / 2 to equal 5\n✓ throws error on division by zero\n✓ async test example"
  },
  {
    "id": 11,
    "topic": "Security",
    "title": "Security Best Practices",
    "description": "Learn essential security practices for Node.js applications.",
    "codeExample": "const express = require('express');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\n\nconst app = express();\n\n// Security middleware\napp.use(helmet()); // Sets various HTTP headers\napp.use(express.json({ limit: '10mb' })); // Limit body size\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\napp.use(limiter);\n\n// Password hashing\nasync function hashPassword(password) {\n  const saltRounds = 12;\n  return await bcrypt.hash(password, saltRounds);\n}\n\n// JWT token creation\nfunction createToken(userId) {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: '1h' });\n}\n\n// Input validation\nfunction validateEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nconsole.log('Security measures implemented');",
    "output": "Security measures implemented"
  },
  {
    "id": 12,
    "topic": "Performance",
    "title": "Performance Optimization",
    "description": "Learn techniques to optimize Node.js application performance.",
    "codeExample": "const cluster = require('cluster');\nconst os = require('os');\nconst express = require('express');\n\n// Clustering for multi-core utilization\nif (cluster.isMaster) {\n  const numCPUs = os.cpus().length;\n  console.log(`Master process ${process.pid} is running`);\n  \n  // Fork workers\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n  \n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`Worker ${worker.process.pid} died`);\n    cluster.fork(); // Replace dead worker\n  });\n} else {\n  const app = express();\n  \n  // Memory-efficient caching\n  const cache = new Map();\n  const MAX_CACHE_SIZE = 1000;\n  \n  function setCache(key, value) {\n    if (cache.size >= MAX_CACHE_SIZE) {\n      const firstKey = cache.keys().next().value;\n      cache.delete(firstKey);\n    }\n    cache.set(key, value);\n  }\n  \n  // Optimized route with caching\n  app.get('/expensive-operation/:id', (req, res) => {\n    const id = req.params.id;\n    \n    if (cache.has(id)) {\n      return res.json(cache.get(id));\n    }\n    \n    // Simulate expensive operation\n    const result = { id, data: 'Processed data', timestamp: Date.now() };\n    setCache(id, result);\n    res.json(result);\n  });\n  \n  app.listen(3000, () => {\n    console.log(`Worker ${process.pid} started`);\n  });\n}",
    "output": "Master process [PID] is running\nWorker [PID] started\nWorker [PID] started..."
  }
]