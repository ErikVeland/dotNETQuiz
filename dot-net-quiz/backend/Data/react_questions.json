[
  {
    "id": 1,
    "topic": "Components",
    "type": "multiple-choice",
    "question": "What is the correct way to create a React component?",
    "choices": [
      "function MyComponent() { return <div>Hello</div>; }",
      "class MyComponent { render() { return <div>Hello</div>; } }",
      "MyComponent() => { return <div>Hello</div>; }",
      "const MyComponent = { <div>Hello</div> }"
    ],
    "correctAnswer": 0,
    "explanation": "In modern React, functional components are the preferred way to create components. They are simpler and can use hooks for state and side effects."
  },
  {
    "id": 2,
    "topic": "Components",
    "type": "multiple-choice",
    "question": "How do you pass data to a React component?",
    "choices": [
      "Using props",
      "Using state",
      "Using context",
      "Using refs"
    ],
    "correctAnswer": 0,
    "explanation": "Props are used to pass data from a parent component to a child component in React."
  },
  {
    "id": 3,
    "topic": "Hooks",
    "type": "open-ended",
    "question": "What are React Hooks and why were they introduced?",
    "choices": null,
    "correctAnswer": null,
    "explanation": "React Hooks are functions that let you 'hook into' React state and lifecycle features from function components. They were introduced to allow using state and other React features without writing a class, making components simpler and easier to reuse."
  },
  {
    "id": 4,
    "topic": "Hooks",
    "type": "multiple-choice",
    "question": "Which hook is used to manage state in a functional component?",
    "choices": [
      "useState",
      "useEffect",
      "useContext",
      "useReducer"
    ],
    "correctAnswer": 0,
    "explanation": "The useState hook is used to add state to functional components in React."
  },
  {
    "id": 5,
    "topic": "Context",
    "type": "multiple-choice",
    "question": "What is the purpose of React Context?",
    "choices": [
      "To share data between components without prop drilling",
      "To manage component state",
      "To handle side effects",
      "To optimize component performance"
    ],
    "correctAnswer": 0,
    "explanation": "React Context provides a way to pass data through the component tree without having to pass props down manually at every level."
  },
  {
    "id": 6,
    "topic": "Lifecycle",
    "type": "multiple-choice",
    "question": "Which method is called after a component is rendered for the first time?",
    "choices": [
      "componentDidMount",
      "componentDidUpdate",
      "componentWillUnmount",
      "render"
    ],
    "correctAnswer": 0,
    "explanation": "componentDidMount is called immediately after a component is mounted (inserted into the tree)."
  },
  {
    "id": 7,
    "topic": "Rendering",
    "type": "open-ended",
    "question": "What is the virtual DOM and how does it improve React performance?",
    "choices": null,
    "correctAnswer": null,
    "explanation": "The virtual DOM is a lightweight JavaScript representation of the actual DOM. React uses it to optimize updates by comparing the virtual DOM with the real DOM and only updating the parts that have changed, reducing expensive DOM operations."
  },
  {
    "id": 8,
    "topic": "State",
    "type": "multiple-choice",
    "question": "How do you update state in a functional component?",
    "choices": [
      "Using the setter function returned by useState",
      "Directly modifying the state variable",
      "Using this.setState",
      "Using forceUpdate"
    ],
    "correctAnswer": 0,
    "explanation": "When using useState, you get a state variable and a setter function. You must use the setter function to update state."
  },
  {
    "id": 9,
    "topic": "Hooks",
    "type": "multiple-choice",
    "question": "What is the purpose of useCallback hook?",
    "choices": ["Memoize functions to prevent unnecessary re-renders", "Cache API responses", "Handle user callbacks", "Create callback refs"],
    "correctAnswer": 0,
    "explanation": "useCallback memoizes functions to prevent unnecessary re-renders of child components when the parent re-renders, optimizing performance by maintaining referential equality."
  },
  {
    "id": 10,
    "topic": "Performance",
    "type": "multiple-choice",
    "question": "What does React.memo() do?",
    "choices": ["Prevents re-renders if props haven't changed", "Memoizes state values", "Caches API calls", "Optimizes memory usage"],
    "correctAnswer": 0,
    "explanation": "React.memo() is a higher-order component that memoizes the component and only re-renders if its props have changed, improving performance."
  },
  {
    "id": 11,
    "topic": "State Management",
    "type": "open-ended",
    "question": "When should you use useReducer instead of useState?",
    "choices": null,
    "correctAnswer": null,
    "explanation": "Use useReducer when: state logic is complex with multiple sub-values, next state depends on previous state, you have complex state transitions, managing state that involves multiple actions, or when you need more predictable state updates."
  },
  {
    "id": 12,
    "topic": "Testing",
    "type": "multiple-choice",
    "question": "Which library is commonly used for testing React components?",
    "choices": ["React Testing Library", "Selenium", "JUnit", "PHPUnit"],
    "correctAnswer": 0,
    "explanation": "React Testing Library is the most popular choice for testing React components, focusing on testing behavior rather than implementation details."
  },
  {
    "id": 13,
    "topic": "Error Handling",
    "type": "multiple-choice",
    "question": "What is an Error Boundary in React?",
    "choices": ["A component that catches JavaScript errors in child components", "A validation method for props", "A routing mechanism", "A state management tool"],
    "correctAnswer": 0,
    "explanation": "Error Boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI."
  },
  {
    "id": 14,
    "topic": "Advanced",
    "type": "open-ended",
    "question": "What are React Portals and when would you use them?",
    "choices": null,
    "correctAnswer": null,
    "explanation": "React Portals provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. Use them for modals, tooltips, or dropdowns that need to escape parent containers with overflow:hidden or z-index stacking contexts."
  },
  {
    "id": 15,
    "topic": "Concurrency",
    "type": "multiple-choice",
    "question": "What is React Suspense used for?",
    "choices": ["Handling loading states for async operations", "Suspending component updates", "Pausing animations", "Managing timeouts"],
    "correctAnswer": 0,
    "explanation": "React Suspense lets components 'wait' for something before rendering, typically used with lazy loading and data fetching to handle loading states declaratively."
  }
]