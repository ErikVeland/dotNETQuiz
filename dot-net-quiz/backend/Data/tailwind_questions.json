[
  {
    "id": 1,
    "topic": "Basics",
    "type": "multiple-choice",
    "question": "What is Tailwind CSS?",
    "choices": [
      "A utility-first CSS framework",
      "A component-based CSS framework",
      "A CSS preprocessor",
      "A JavaScript framework"
    ],
    "correctAnswer": 0,
    "explanation": "Tailwind CSS is a utility-first CSS framework that provides low-level utility classes to build designs without writing custom CSS."
  },
  {
    "id": 2,
    "topic": "Basics",
    "type": "multiple-choice",
    "question": "How do you add padding to an element in Tailwind CSS?",
    "choices": [
      "p-4",
      "m-4",
      "w-4",
      "h-4"
    ],
    "correctAnswer": 0,
    "explanation": "In Tailwind, p-* classes are used for padding. The number represents the spacing scale where p-4 equals 1rem (16px)."
  },
  {
    "id": 3,
    "topic": "Layout",
    "type": "open-ended",
    "question": "How does Tailwind's mobile-first responsive design approach work?",
    "choices": null,
    "correctAnswer": null,
    "explanation": "Tailwind uses a mobile-first approach where unprefixed classes apply to all screen sizes, and responsive prefixes (sm:, md:, lg:, xl:) apply to specific breakpoints and larger screens. This means styles stack as the screen size increases."
  },
  {
    "id": 4,
    "topic": "Layout",
    "type": "multiple-choice",
    "question": "Which class is used to create a flex container in Tailwind?",
    "choices": [
      "flex",
      "grid",
      "block",
      "inline"
    ],
    "correctAnswer": 0,
    "explanation": "The flex class creates a flex container in Tailwind CSS, enabling flexbox layout for its children."
  },
  {
    "id": 5,
    "topic": "Customization",
    "type": "multiple-choice",
    "question": "Where do you customize Tailwind's default theme?",
    "choices": [
      "tailwind.config.js",
      "package.json",
      "postcss.config.js",
      "styles.css"
    ],
    "correctAnswer": 0,
    "explanation": "Tailwind's configuration file (tailwind.config.js) is where you customize the default theme, add plugins, and configure other options."
  },
  {
    "id": 6,
    "topic": "Utilities",
    "type": "multiple-choice",
    "question": "How do you make text bold in Tailwind CSS?",
    "choices": [
      "font-bold",
      "text-bold",
      "bold",
      "font-weight-bold"
    ],
    "correctAnswer": 0,
    "explanation": "The font-bold class makes text bold in Tailwind CSS. Tailwind uses the font-* naming convention for font weight utilities."
  },
  {
    "id": 7,
    "topic": "Responsive",
    "type": "open-ended",
    "question": "What are the default breakpoints in Tailwind CSS?",
    "choices": null,
    "correctAnswer": null,
    "explanation": "Tailwind's default breakpoints are: sm (640px), md (768px), lg (1024px), xl (1280px), and 2xl (1536px). These can be customized in the tailwind.config.js file."
  },
  {
    "id": 8,
    "topic": "Colors",
    "type": "multiple-choice",
    "question": "How do you set a background color to blue-500 in Tailwind?",
    "choices": [
      "bg-blue-500",
      "background-blue-500",
      "color-blue-500",
      "blue-500-bg"
    ],
    "correctAnswer": 0,
    "explanation": "In Tailwind, background colors are set using the bg-* naming convention, so bg-blue-500 sets the background color to the 500 shade of blue."
  },
  {
    "id": 9,
    "topic": "Customization",
    "type": "multiple-choice",
    "question": "How do you add custom colors to Tailwind CSS?",
    "choices": ["Extend the theme in tailwind.config.js", "Create new CSS classes", "Use inline styles", "Modify the core framework"],
    "correctAnswer": 0,
    "explanation": "Custom colors are added by extending the theme configuration in tailwind.config.js, which generates utility classes for your custom color palette."
  },
  {
    "id": 10,
    "topic": "Performance",
    "type": "multiple-choice",
    "question": "What is PurgeCSS and why is it important for Tailwind?",
    "choices": ["Removes unused CSS classes to reduce bundle size", "Validates CSS syntax", "Compresses images", "Optimizes JavaScript"],
    "correctAnswer": 0,
    "explanation": "PurgeCSS (now built into Tailwind) removes unused utility classes from the final CSS bundle, dramatically reducing file size from hundreds of KB to just a few KB."
  },
  {
    "id": 11,
    "topic": "Dark Mode",
    "type": "open-ended",
    "question": "How do you implement dark mode in Tailwind CSS?",
    "choices": null,
    "correctAnswer": null,
    "explanation": "Enable dark mode by setting darkMode: 'class' in config, then use dark: prefixed utilities like 'bg-white dark:bg-gray-800'. Toggle by adding/removing 'dark' class on document element."
  },
  {
    "id": 12,
    "topic": "Components",
    "type": "multiple-choice",
    "question": "What is the @apply directive used for in Tailwind?",
    "choices": ["Applying utility classes in custom CSS", "Creating animations", "Importing external CSS", "Optimizing performance"],
    "correctAnswer": 0,
    "explanation": "@apply allows you to use Tailwind utilities within custom CSS classes, useful for creating component classes while maintaining utility-first approach."
  },
  {
    "id": 13,
    "topic": "Responsive Design",
    "type": "multiple-choice",
    "question": "How does Tailwind handle responsive design?",
    "choices": ["Mobile-first breakpoint prefixes (sm:, md:, lg:, xl:)", "Desktop-first approach", "Automatic responsive scaling", "Media query mixins"],
    "correctAnswer": 0,
    "explanation": "Tailwind uses mobile-first responsive design with breakpoint prefixes that apply styles at specific screen sizes and larger."
  },
  {
    "id": 14,
    "topic": "Plugins",
    "type": "open-ended",
    "question": "What are Tailwind plugins and how do they extend functionality?",
    "choices": null,
    "correctAnswer": null,
    "explanation": "Tailwind plugins extend the framework by adding new utilities, components, or base styles. Official plugins include @tailwindcss/forms, @tailwindcss/typography, and @tailwindcss/aspect-ratio. Custom plugins can add project-specific utilities."
  },
  {
    "id": 15,
    "topic": "Best Practices",
    "type": "multiple-choice",
    "question": "What is a recommended approach for managing long utility class lists?",
    "choices": ["Extract to component classes or use @apply", "Use inline comments", "Group by functionality", "Use shorter class names"],
    "correctAnswer": 0,
    "explanation": "For maintainability, extract frequently used utility combinations into component classes using @apply, or create framework-specific components that encapsulate the styling."
  }
]