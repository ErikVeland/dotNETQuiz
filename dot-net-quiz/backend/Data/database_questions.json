[
  {
    "id": 1,
    "topic": "Database Fundamentals",
    "type": "multiple-choice",
    "question": "What is a primary key in a relational database?",
    "choices": [
      "A unique identifier for each row in a table",
      "A key used to encrypt database records",
      "The first column in a table",
      "A key used for sorting records"
    ],
    "correctAnswer": 0,
    "explanation": "A primary key is a column or set of columns that uniquely identifies each row in a table. It must contain unique values and cannot contain NULL values. Primary keys are essential for entity integrity and are used to establish relationships between tables."
  },
  {
    "id": 2,
    "topic": "Database Fundamentals",
    "type": "multiple-choice",
    "question": "Which normal form eliminates transitive dependencies?",
    "choices": [
      "Third Normal Form (3NF)",
      "First Normal Form (1NF)",
      "Second Normal Form (2NF)",
      "Boyce-Codd Normal Form (BCNF)"
    ],
    "correctAnswer": 0,
    "explanation": "Third Normal Form (3NF) eliminates transitive dependencies, where non-key attributes depend on other non-key attributes. A table is in 3NF if it is in 2NF and all non-key attributes are functionally dependent only on the primary key."
  },
  {
    "id": 3,
    "topic": "SQL",
    "type": "open-ended",
    "question": "What is the difference between INNER JOIN and LEFT JOIN? When would you use each?",
    "choices": null,
    "correctAnswer": null,
    "explanation": "INNER JOIN returns only rows that have matching values in both tables. LEFT JOIN returns all rows from the left table and matching rows from the right table. If there's no match, NULL values are returned for columns from the right table. Use INNER JOIN when you only want records that exist in both tables, and LEFT JOIN when you want all records from the first table regardless of whether they have matches in the second table."
  },
  {
    "id": 4,
    "topic": "Data Modeling",
    "type": "multiple-choice",
    "question": "What does an ER diagram represent?",
    "choices": [
      "Entities, relationships, and attributes in a database",
      "Error reports in a database system",
      "Execution plans for database queries",
      "Encryption rules for database security"
    ],
    "correctAnswer": 0,
    "explanation": "An Entity-Relationship (ER) diagram is a visual representation of data that describes how entities relate to each other within a database. It shows entities (tables), attributes (columns), and relationships (foreign keys) between entities, helping to design and understand database structure."
  },
  {
    "id": 5,
    "topic": "ORM Integration",
    "type": "multiple-choice",
    "question": "What is the purpose of a DbContext in Entity Framework Core?",
    "choices": [
      "To act as a bridge between the domain and the database",
      "To encrypt database connections",
      "To manage user authentication",
      "To optimize SQL queries"
    ],
    "correctAnswer": 0,
    "explanation": "DbContext in Entity Framework Core acts as a bridge between your domain or entity classes and the database. It's responsible for database connections, querying, change tracking, and saving changes. It provides LINQ-to-Entities queries and manages the unit of work pattern."
  },
  {
    "id": 6,
    "topic": "Performance",
    "type": "multiple-choice",
    "question": "What is the N+1 query problem and how can it be avoided?",
    "choices": [
      "Executing one query to get parent records and N queries to get related data for each parent; use eager loading",
      "A syntax error in SQL queries",
      "A problem with database indexing",
      "A network connectivity issue"
    ],
    "correctAnswer": 0,
    "explanation": "The N+1 query problem occurs when you execute one query to get a set of parent records and then N additional queries to get related data for each parent record. This can be avoided by using eager loading (JOINs) to fetch all needed data in a single query, or by using techniques like batch loading."
  },
  {
    "id": 7,
    "topic": "Transactions",
    "type": "open-ended",
    "question": "Explain ACID properties in database transactions.",
    "choices": null,
    "correctAnswer": null,
    "explanation": "ACID stands for Atomicity, Consistency, Isolation, and Durability. Atomicity ensures transactions are all-or-nothing. Consistency ensures transactions bring the database from one valid state to another. Isolation ensures concurrent transactions don't interfere with each other. Durability ensures committed transactions are permanently recorded even in system failures."
  },
  {
    "id": 8,
    "topic": "Indexing",
    "type": "multiple-choice",
    "question": "When should you consider adding an index to a database column?",
    "choices": [
      "When the column is frequently used in WHERE clauses, JOINs, or ORDER BY clauses",
      "When the column contains large text data",
      "When the table has fewer than 100 rows",
      "When the column is updated frequently"
    ],
    "correctAnswer": 0,
    "explanation": "Indexes should be added to columns that are frequently used in WHERE clauses, JOIN conditions, or ORDER BY clauses as they significantly improve query performance. However, indexes come with overhead for INSERT, UPDATE, and DELETE operations, so they should be used judiciously."
  }
]