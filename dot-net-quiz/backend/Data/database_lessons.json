[
  {
    "id": 1,
    "topic": "Database Fundamentals",
    "title": "Relational Model and Normalization",
    "description": "Learn about the relational model, keys, constraints, and normalization principles to design efficient databases.",
    "codeExample": "-- Creating a properly normalized table with constraints\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  first_name VARCHAR(50) NOT NULL,\n  last_name VARCHAR(50) NOT NULL,\n  email VARCHAR(100) UNIQUE NOT NULL,\n  birth_date DATE,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  CHECK (email LIKE '%@%'),\n  INDEX idx_email (email),\n  INDEX idx_name (last_name, first_name)\n);\n\n-- Inserting data with proper validation\nINSERT INTO users (first_name, last_name, email, birth_date) VALUES \n('John', 'Doe', 'john@example.com', '1990-05-15'),\n('Jane', 'Smith', 'jane@example.com', '1985-12-03');\n\n-- Querying with joins and ordering\nSELECT first_name, last_name, email FROM users \nWHERE birth_date > '1980-01-01' \nORDER BY last_name, first_name;\n\n-- First Normal Form (1NF) - Atomic values\n-- Second Normal Form (2NF) - 1NF + no partial dependencies\n-- Third Normal Form (3NF) - 2NF + no transitive dependencies",
    "output": "Properly normalized table with constraints, indexes, and sample data following database design best practices"
  },
  {
    "id": 2,
    "topic": "Database Fundamentals",
    "title": "Keys, Constraints, and Indexes",
    "description": "Learn about different types of keys, constraints for data integrity, and indexes for performance optimization.",
    "codeExample": "-- Primary key (unique identifier)\nCREATE TABLE products (\n  product_id INT PRIMARY KEY AUTO_INCREMENT,\n  sku VARCHAR(50) UNIQUE NOT NULL,\n  name VARCHAR(100) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL CHECK (price >= 0),\n  category_id INT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Foreign key (relationship between tables)\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT NOT NULL,\n  order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  status ENUM('pending', 'processing', 'shipped', 'delivered') DEFAULT 'pending',\n  total_amount DECIMAL(10, 2) NOT NULL CHECK (total_amount >= 0),\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n  INDEX idx_user_date (user_id, order_date),\n  INDEX idx_status (status)\n);\n\n-- Composite primary key\nCREATE TABLE order_items (\n  order_id INT,\n  product_id INT,\n  quantity INT NOT NULL CHECK (quantity > 0),\n  price_per_unit DECIMAL(10, 2) NOT NULL,\n  PRIMARY KEY (order_id, product_id),\n  FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n-- Check constraints for business rules\nALTER TABLE users \nADD CONSTRAINT chk_birth_date CHECK (birth_date <= CURDATE() AND birth_date >= '1900-01-01');",
    "output": "Database schema with proper keys, constraints, and indexes for data integrity and performance"
  },
  {
    "id": 3,
    "topic": "SQL",
    "title": "Advanced Queries with Joins, Subqueries, and Set Operations",
    "description": "Learn how to write complex queries using different join types, subqueries, and set operations for data analysis.",
    "codeExample": "-- Different types of joins\n-- Inner join (only matching records)\nSELECT u.first_name, u.last_name, o.order_date, o.total_amount\nFROM users u\nINNER JOIN orders o ON u.id = o.user_id;\n\n-- Left join (all users, even without orders)\nSELECT u.first_name, u.last_name, COUNT(o.order_id) as order_count\nFROM users u\nLEFT JOIN orders o ON u.id = o.user_id\nGROUP BY u.id, u.first_name, u.last_name;\n\n-- Subqueries\n-- Correlated subquery\nSELECT first_name, last_name\nFROM users u\nWHERE EXISTS (\n  SELECT 1 FROM orders o \n  WHERE o.user_id = u.id AND o.total_amount > 1000\n);\n\n-- Subquery in SELECT\nSELECT first_name, last_name,\n  (SELECT COUNT(*) FROM orders WHERE user_id = users.id) as order_count\nFROM users;\n\n-- Set operations\n-- UNION (combines results, removes duplicates)\nSELECT first_name FROM users WHERE first_name LIKE 'J%'\nUNION\nSELECT name FROM products WHERE name LIKE 'J%';\n\n-- UNION ALL (combines results, keeps duplicates)\nSELECT email FROM users\nUNION ALL\nSELECT email FROM newsletter_subscribers;",
    "output": "Complex queries demonstrating various join types, correlated and non-correlated subqueries, and set operations"
  },
  {
    "id": 4,
    "topic": "Data Modeling",
    "title": "ER Diagrams and Advanced Relationships",
    "description": "Learn how to create comprehensive Entity-Relationship diagrams and model complex relationships including inheritance and polymorphic associations.",
    "codeExample": "-- One-to-One relationship (User Profile)\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE profiles (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT UNIQUE,  -- UNIQUE constraint makes it one-to-one\n  bio TEXT,\n  website VARCHAR(100),\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n\n-- Many-to-Many with attributes (Enrollment with grades)\nCREATE TABLE students (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE courses (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  title VARCHAR(100) NOT NULL,\n  credits INT DEFAULT 3\n);\n\nCREATE TABLE enrollments (\n  student_id INT,\n  course_id INT,\n  enrollment_date DATE,\n  grade CHAR(2),\n  PRIMARY KEY (student_id, course_id),\n  FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE,\n  FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE\n);\n\n-- Hierarchical data (Adjacency List Model)\nCREATE TABLE categories (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(100) NOT NULL,\n  parent_id INT,\n  FOREIGN KEY (parent_id) REFERENCES categories(id)\n);\n\n-- Self-referencing relationship (Manager-Subordinate)\nCREATE TABLE employees (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(100) NOT NULL,\n  manager_id INT,\n  FOREIGN KEY (manager_id) REFERENCES employees(id)\n);",
    "output": "Advanced database schema designs showing one-to-one relationships, many-to-many with attributes, and hierarchical data modeling"
  },
  {
    "id": 5,
    "topic": "ORM Integration",
    "title": "Entity Framework Core Advanced Patterns",
    "description": "Learn advanced Entity Framework Core patterns including lazy loading, eager loading, and performance optimization techniques.",
    "codeExample": "// Entity classes with relationships\npublic class Blog\n{\n    public int BlogId { get; set; }\n    public string Url { get; set; } = string.Empty;\n    \n    // Navigation property for related posts\n    public List<Post> Posts { get; } = new();\n    \n    // One-to-one relationship\n    public BlogDetails? BlogDetails { get; set; }\n}\n\npublic class Post\n{\n    public int PostId { get; set; }\n    public string Title { get; set; } = string.Empty;\n    public string Content { get; set; } = string.Empty;\n    \n    // Foreign key\n    public int BlogId { get; set; }\n    \n    // Navigation property\n    public Blog Blog { get; set; } = null!;\n    \n    // Many-to-many relationship\n    public List<Tag> Tags { get; } = new();\n}\n\npublic class Tag\n{\n    public int TagId { get; set; }\n    public string Name { get; set; } = string.Empty;\n    \n    public List<Post> Posts { get; } = new();\n}\n\npublic class BlogDetails\n{\n    public int BlogDetailsId { get; set; }\n    public DateTime CreatedOn { get; set; }\n    public string Owner { get; set; } = string.Empty;\n    \n    public int BlogId { get; set; }\n    public Blog Blog { get; set; } = null!;\n}\n\n// DbContext with advanced configuration\npublic class BloggingContext : DbContext\n{\n    public DbSet<Blog> Blogs { get; set; }\n    public DbSet<Post> Posts { get; set; }\n    public DbSet<Tag> Tags { get; set; }\n    public DbSet<BlogDetails> BlogDetails { get; set; }\n    \n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer(\n            @\"Server=(localdb)\\mssqllocaldb;Database=Blogging;Trusted_Connection=True\");\n    }\n    \n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // Configure many-to-many relationship\n        modelBuilder.Entity<Post>()\n            .HasMany(p => p.Tags)\n            .WithMany(t => t.Posts)\n            .UsingEntity(j => j.ToTable(\"PostTags\"));\n            \n        // Configure indexes\n        modelBuilder.Entity<Blog>()\n            .HasIndex(b => b.Url)\n            .IsUnique();\n    }\n}\n\n// Query optimization examples\n// Eager loading to avoid N+1 problem\nvar blogs = context.Blogs\n    .Include(b => b.Posts)\n        .ThenInclude(p => p.Tags)\n    .ToList();\n    \n// Projection to load only needed data\nvar blogSummaries = context.Blogs\n    .Select(b => new { b.Url, PostCount = b.Posts.Count() })\n    .ToList();",
    "output": "Advanced C# entity classes and DbContext configuration showing relationships, navigation properties, and performance optimization techniques"
  },
  {
    "id": 6,
    "topic": "Transactions",
    "title": "ACID Properties and Transaction Management",
    "description": "Learn about ACID properties, transaction isolation levels, and managing concurrent database operations.",
    "codeExample": "-- Transaction with ACID properties\nSTART TRANSACTION;\n\n-- Atomicity: All operations succeed or all fail\nUPDATE accounts SET balance = balance - 100 WHERE id = 1;\nUPDATE accounts SET balance = balance + 100 WHERE id = 2;\n\n-- Check for errors and commit or rollback\nIF @@ERROR = 0\n  COMMIT;\nELSE\n  ROLLBACK;\n\n-- Isolation levels\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED;\nSET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n\n-- Savepoints for partial rollbacks\nSTART TRANSACTION;\nINSERT INTO users (name, email) VALUES ('John', 'john@example.com');\nSAVEPOINT sp1;\nINSERT INTO orders (user_id, total) VALUES (1, 100);\n-- Rollback to savepoint if needed\nROLLBACK TO SAVEPOINT sp1;\nCOMMIT;",
    "output": "Safe transaction handling with ACID compliance and rollback capabilities"
  },
  {
    "id": 7,
    "topic": "Performance",
    "title": "Query Optimization and Execution Plans",
    "description": "Learn how to analyze and optimize query performance using execution plans and indexing strategies.",
    "codeExample": "-- Analyze query execution plan\nEXPLAIN SELECT u.name, COUNT(o.id) as order_count\nFROM users u\nLEFT JOIN orders o ON u.id = o.user_id\nWHERE u.created_at > '2023-01-01'\nGROUP BY u.id, u.name\nHAVING COUNT(o.id) > 5;\n\n-- Create indexes for better performance\nCREATE INDEX idx_users_created_at ON users(created_at);\nCREATE INDEX idx_orders_user_id ON orders(user_id);\nCREATE INDEX idx_composite ON orders(user_id, created_at);\n\n-- Query optimization techniques\n-- 1. Use LIMIT for large datasets\nSELECT * FROM products ORDER BY price DESC LIMIT 10;\n\n-- 2. Use EXISTS instead of IN for subqueries\nSELECT * FROM users u\nWHERE EXISTS (SELECT 1 FROM orders o WHERE o.user_id = u.id);\n\n-- 3. Avoid SELECT * in production\nSELECT id, name, email FROM users WHERE active = 1;\n\n-- Partitioning for large tables\nCREATE TABLE sales (\n  id INT,\n  sale_date DATE,\n  amount DECIMAL(10,2)\n) PARTITION BY RANGE (YEAR(sale_date)) (\n  PARTITION p2022 VALUES LESS THAN (2023),\n  PARTITION p2023 VALUES LESS THAN (2024),\n  PARTITION p2024 VALUES LESS THAN (2025)\n);",
    "output": "Optimized queries with proper indexing and execution plan analysis"
  },
  {
    "id": 8,
    "topic": "Functions",
    "title": "Stored Procedures and User-Defined Functions",
    "description": "Learn how to create and use stored procedures and functions for business logic encapsulation.",
    "codeExample": "-- Stored procedure with parameters\nDELIMITER //\nCREATE PROCEDURE GetUserOrders(\n  IN userId INT,\n  IN fromDate DATE,\n  OUT totalOrders INT,\n  OUT totalAmount DECIMAL(10,2)\n)\nBEGIN\n  DECLARE EXIT HANDLER FOR SQLEXCEPTION\n  BEGIN\n    ROLLBACK;\n    RESIGNAL;\n  END;\n  \n  START TRANSACTION;\n  \n  SELECT COUNT(*), COALESCE(SUM(total_amount), 0)\n  INTO totalOrders, totalAmount\n  FROM orders\n  WHERE user_id = userId AND order_date >= fromDate;\n  \n  COMMIT;\nEND //\nDELIMITER ;\n\n-- Call stored procedure\nCALL GetUserOrders(1, '2023-01-01', @orders, @amount);\nSELECT @orders, @amount;\n\n-- User-defined function\nDELIMITER //\nCREATE FUNCTION CalculateDiscount(\n  orderAmount DECIMAL(10,2),\n  customerType VARCHAR(20)\n) RETURNS DECIMAL(10,2)\nREADS SQL DATA\nDETERMINISTIC\nBEGIN\n  DECLARE discount DECIMAL(10,2) DEFAULT 0;\n  \n  CASE customerType\n    WHEN 'premium' THEN SET discount = orderAmount * 0.15;\n    WHEN 'gold' THEN SET discount = orderAmount * 0.10;\n    WHEN 'silver' THEN SET discount = orderAmount * 0.05;\n    ELSE SET discount = 0;\n  END CASE;\n  \n  RETURN discount;\nEND //\nDELIMITER ;\n\n-- Use function in query\nSELECT *, \n  CalculateDiscount(total_amount, customer_type) as discount\nFROM orders;",
    "output": "Reusable stored procedures and functions for complex business logic"
  },
  {
    "id": 9,
    "topic": "NoSQL",
    "title": "Document Databases and MongoDB",
    "description": "Learn about NoSQL concepts and working with document databases like MongoDB.",
    "codeExample": "// MongoDB document structure\n// Users collection\n{\n  \"_id\": ObjectId(\"507f1f77bcf86cd799439011\"),\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"profile\": {\n    \"age\": 30,\n    \"interests\": [\"programming\", \"music\", \"travel\"],\n    \"address\": {\n      \"street\": \"123 Main St\",\n      \"city\": \"New York\",\n      \"zipcode\": \"10001\"\n    }\n  },\n  \"createdAt\": ISODate(\"2023-01-15T10:30:00Z\")\n}\n\n// MongoDB queries\n// Find documents\ndb.users.find({ \"profile.age\": { $gte: 18 } })\n\n// Complex query with multiple conditions\ndb.users.find({\n  $and: [\n    { \"profile.age\": { $gte: 25 } },\n    { \"profile.interests\": \"programming\" }\n  ]\n})\n\n// Update document\ndb.users.updateOne(\n  { \"_id\": ObjectId(\"507f1f77bcf86cd799439011\") },\n  { \n    $set: { \"profile.age\": 31 },\n    $push: { \"profile.interests\": \"reading\" }\n  }\n)\n\n// Aggregation pipeline\ndb.users.aggregate([\n  { $match: { \"profile.age\": { $gte: 25 } } },\n  { $group: {\n    _id: \"$profile.address.city\",\n    count: { $sum: 1 },\n    avgAge: { $avg: \"$profile.age\" }\n  }},\n  { $sort: { count: -1 } }\n])\n\n// Create index\ndb.users.createIndex({ \"email\": 1 }, { unique: true })\ndb.users.createIndex({ \"profile.age\": 1, \"profile.interests\": 1 })",
    "output": "Flexible document storage with nested data structures and powerful querying capabilities"
  },
  {
    "id": 10,
    "topic": "Backup",
    "title": "Database Backup and Recovery Strategies",
    "description": "Learn essential backup and recovery techniques to protect data integrity and business continuity.",
    "codeExample": "-- Full database backup\nmysqldump -u root -p --all-databases > full_backup.sql\n\n-- Backup specific database with structure and data\nmysqldump -u root -p --databases myapp > myapp_backup.sql\n\n-- Backup only structure (schema)\nmysqldump -u root -p --no-data myapp > schema_backup.sql\n\n-- Backup only data\nmysqldump -u root -p --no-create-info myapp > data_backup.sql\n\n-- Point-in-time recovery setup\n-- Enable binary logging in my.cnf\nlog-bin=mysql-bin\nserver-id=1\nbinlog-format=ROW\n\n-- Create incremental backup\nmysqlbinlog mysql-bin.000001 > incremental_backup.sql\n\n-- Restore from backup\nmysql -u root -p < full_backup.sql\n\n-- Restore specific database\nmysql -u root -p myapp < myapp_backup.sql\n\n-- Automated backup script (bash)\n#!/bin/bash\nBACKUP_DIR=\"/var/backups/mysql\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/backup_$DATE.sql\"\n\n# Create backup directory if it doesn't exist\nmkdir -p $BACKUP_DIR\n\n# Perform backup\nmysqldump -u backup_user -p$BACKUP_PASSWORD --all-databases > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Remove backups older than 7 days\nfind $BACKUP_DIR -name \"*.gz\" -mtime +7 -delete\n\necho \"Backup completed: $BACKUP_FILE.gz\"",
    "output": "Comprehensive backup solution with full, incremental, and automated backup strategies"
  },
  {
    "id": 11,
    "topic": "Security",
    "title": "Database Security and Access Control",
    "description": "Learn database security best practices including user management, encryption, and SQL injection prevention.",
    "codeExample": "-- User management and privileges\n-- Create database user\nCREATE USER 'app_user'@'localhost' IDENTIFIED BY 'SecurePassword123!';\n\n-- Grant specific privileges\nGRANT SELECT, INSERT, UPDATE ON myapp.* TO 'app_user'@'localhost';\nGRANT EXECUTE ON PROCEDURE myapp.GetUserOrders TO 'app_user'@'localhost';\n\n-- Create read-only user\nCREATE USER 'readonly_user'@'%' IDENTIFIED BY 'ReadOnlyPass456!';\nGRANT SELECT ON myapp.* TO 'readonly_user'@'%';\n\n-- Revoke privileges\nREVOKE INSERT ON myapp.users FROM 'app_user'@'localhost';\n\n-- Show user privileges\nSHOW GRANTS FOR 'app_user'@'localhost';\n\n-- SQL injection prevention (parameterized queries)\n-- Vulnerable code (DON'T DO THIS)\n-- query = \"SELECT * FROM users WHERE id = \" + userId;\n\n-- Safe parameterized query (C#)\nstring query = \"SELECT * FROM users WHERE id = @userId\";\nusing var command = new MySqlCommand(query, connection);\ncommand.Parameters.AddWithValue(\"@userId\", userId);\n\n-- Data encryption\n-- Encrypt sensitive columns\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255),\n  ssn VARBINARY(255), -- Encrypted field\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Insert encrypted data\nINSERT INTO users (email, ssn) \nVALUES ('user@example.com', AES_ENCRYPT('123-45-6789', 'encryption_key'));\n\n-- Retrieve and decrypt\nSELECT email, AES_DECRYPT(ssn, 'encryption_key') as ssn_decrypted \nFROM users WHERE id = 1;\n\n-- Connection security\n-- Require SSL connections\nREQUIRE SSL;\nREQUIRE X509;\n\n-- Password policy\nSET GLOBAL validate_password.policy = STRONG;\nSET GLOBAL validate_password.length = 12;",
    "output": "Secure database configuration with proper user privileges, encryption, and injection prevention"
  },
  {
    "id": 12,
    "topic": "Advanced",
    "title": "Database Scaling and Replication",
    "description": "Learn about database scaling techniques including replication, sharding, and distributed databases.",
    "codeExample": "-- Master-Slave Replication Setup\n-- Master configuration (my.cnf)\nserver-id = 1\nlog-bin = mysql-bin\nbinlog-do-db = myapp\n\n-- Slave configuration (my.cnf)\nserver-id = 2\nrelay-log = mysql-relay-bin\nlog-slave-updates = 1\nread-only = 1\n\n-- Create replication user on master\nCREATE USER 'replicator'@'%' IDENTIFIED BY 'ReplicationPass123!';\nGRANT REPLICATION SLAVE ON *.* TO 'replicator'@'%';\nFLUSH PRIVILEGES;\n\n-- Get master status\nSHOW MASTER STATUS;\n\n-- Configure slave\nCHANGE MASTER TO\n  MASTER_HOST='master_ip',\n  MASTER_USER='replicator',\n  MASTER_PASSWORD='ReplicationPass123!',\n  MASTER_LOG_FILE='mysql-bin.000001',\n  MASTER_LOG_POS=154;\n\nSTART SLAVE;\nSHOW SLAVE STATUS\\G\n\n-- Horizontal partitioning (sharding) example\n-- Shard 1: Users with ID 1-1000\nCREATE TABLE users_shard1 (\n  id INT PRIMARY KEY CHECK (id BETWEEN 1 AND 1000),\n  name VARCHAR(100),\n  email VARCHAR(100)\n);\n\n-- Shard 2: Users with ID 1001-2000\nCREATE TABLE users_shard2 (\n  id INT PRIMARY KEY CHECK (id BETWEEN 1001 AND 2000),\n  name VARCHAR(100),\n  email VARCHAR(100)\n);\n\n-- Application-level sharding logic (pseudo-code)\nfunction getUserShard(userId) {\n  if (userId <= 1000) return 'shard1';\n  if (userId <= 2000) return 'shard2';\n  return 'shard3';\n}\n\n-- Read replica load balancing\n-- Write operations go to master\nINSERT INTO users (name, email) VALUES ('John', 'john@example.com');\n\n-- Read operations can use replicas\nSELECT * FROM users WHERE id = 123; -- Can be routed to read replica\n\n-- Connection pooling configuration\nmax_connections = 200\nmax_connect_errors = 100\nconnect_timeout = 10\nwait_timeout = 28800",
    "output": "Scalable database architecture with replication, sharding, and load balancing for high availability"
  }
]