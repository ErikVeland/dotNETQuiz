[
  {
    "id": 1,
    "topic": "Testing Fundamentals",
    "title": "Testing Pyramid and Test Strategies",
    "description": "Learn about the testing pyramid and how to develop a comprehensive testing strategy that balances different types of tests for optimal coverage and performance.",
    "codeExample": "// Unit test example with Jest\nfunction calculateTotal(items, taxRate = 0.1) {\n  const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  return subtotal * (1 + taxRate);\n}\n\ndescribe('calculateTotal', () => {\n  test('calculates total correctly with default tax', () => {\n    const items = [\n      { price: 10, quantity: 2 },  // $20\n      { price: 15, quantity: 1 }   // $15\n    ];  // Subtotal: $35, Tax: $3.50, Total: $38.50\n    \n    expect(calculateTotal(items)).toBeCloseTo(38.5);\n  });\n\n  test('calculates total with custom tax rate', () => {\n    const items = [{ price: 100, quantity: 1 }];\n    expect(calculateTotal(items, 0.05)).toBeCloseTo(105);\n  });\n\n  test('handles empty items array', () => {\n    expect(calculateTotal([])).toBeCloseTo(0);\n  });\n});\n\n// Integration test example with Supertest\nconst request = require('supertest');\nconst app = require('../app');\n\ndescribe('API Integration Tests', () => {\n  describe('GET /api/users', () => {\n    test('responds with JSON array of users', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .expect(200)\n        .expect('Content-Type', /json/);\n        \n      expect(response.body).toBeInstanceOf(Array);\n      expect(response.body[0]).toHaveProperty('id');\n      expect(response.body[0]).toHaveProperty('name');\n    });\n  });\n  \n  describe('POST /api/users', () => {\n    test('creates a new user with valid data', async () => {\n      const newUser = {\n        name: 'John Doe',\n        email: 'john@example.com'\n      };\n      \n      const response = await request(app)\n        .post('/api/users')\n        .send(newUser)\n        .expect(201)\n        .expect('Content-Type', /json/);\n        \n      expect(response.body).toMatchObject({\n        id: expect.any(Number),\n        name: 'John Doe',\n        email: 'john@example.com'\n      });\n    });\n  });\n});",
    "output": "Comprehensive unit tests covering normal cases, edge cases, and boundary conditions, along with integration tests for API endpoints"
  },
  {
    "id": 2,
    "topic": "Unit Testing",
    "title": "Test Structure, Mocking, and Best Practices",
    "description": "Learn how to structure tests using the Arrange-Act-Assert pattern, use mocks effectively, and follow best practices for maintainable test code.",
    "codeExample": "// Arrange-Act-Assert pattern with proper test structure\nclass ShoppingCart {\n  constructor() {\n    this.items = [];\n  }\n  \n  addItem(item) {\n    this.items.push(item);\n  }\n  \n  calculateTotal() {\n    return this.items.reduce((total, item) => total + (item.price * item.quantity), 0);\n  }\n  \n  getItemCount() {\n    return this.items.reduce((count, item) => count + item.quantity, 0);\n  }\n  \n  clear() {\n    this.items = [];\n  }\n}\n\ndescribe('ShoppingCart', () => {\n  let cart;\n  \n  beforeEach(() => {\n    // Arrange - Set up fresh state for each test\n    cart = new ShoppingCart();\n  });\n  \n  afterEach(() => {\n    // Clean up after each test if needed\n    cart.clear();\n  });\n  \n  test('calculates total correctly with multiple items', () => {\n    // Arrange\n    cart.addItem({ name: 'Apple', price: 1.5, quantity: 3 });\n    cart.addItem({ name: 'Banana', price: 0.75, quantity: 2 });\n    \n    // Act\n    const total = cart.calculateTotal();\n    \n    // Assert\n    expect(total).toBeCloseTo(6.0); // (1.5 * 3) + (0.75 * 2) = 4.5 + 1.5 = 6.0\n  });\n  \n  test('returns correct item count', () => {\n    // Arrange\n    cart.addItem({ name: 'Book', price: 20, quantity: 1 });\n    cart.addItem({ name: 'Pen', price: 2, quantity: 5 });\n    \n    // Act\n    const count = cart.getItemCount();\n    \n    // Assert\n    expect(count).toBe(6); // 1 + 5 = 6\n  });\n  \n  test('starts with zero items', () => {\n    // Act & Assert\n    expect(cart.getItemCount()).toBe(0);\n    expect(cart.calculateTotal()).toBe(0);\n  });\n});\n\n// Using mocks to isolate units of code\nconst database = require('../database');\nconst emailService = require('../emailService');\nconst userService = require('../userService');\n\n// Mock external dependencies\njest.mock('../database');\njest.mock('../emailService');\n\ndescribe('User service', () => {\n  beforeEach(() => {\n    // Clear all mocks before each test\n    jest.clearAllMocks();\n  });\n  \n  test('sends welcome email after user creation', async () => {\n    // Arrange\n    const userData = { email: 'test@example.com', name: 'Test User' };\n    const mockUser = { id: 1, ...userData };\n    \n    // Mock database save operation\n    database.saveUser.mockResolvedValue(mockUser);\n    \n    // Act\n    const user = await userService.createUser(userData);\n    \n    // Assert\n    expect(database.saveUser).toHaveBeenCalledWith(userData);\n    expect(emailService.sendWelcomeEmail).toHaveBeenCalledWith(mockUser);\n    expect(user).toEqual(mockUser);\n  });\n  \n  test('handles database errors gracefully', async () => {\n    // Arrange\n    const userData = { email: 'test@example.com', name: 'Test User' };\n    const dbError = new Error('Database connection failed');\n    \n    database.saveUser.mockRejectedValue(dbError);\n    \n    // Act & Assert\n    await expect(userService.createUser(userData)).rejects.toThrow('Database connection failed');\n    expect(emailService.sendWelcomeEmail).not.toHaveBeenCalled();\n  });\n});",
    "output": "Well-structured tests with clear separation of concerns, proper use of beforeEach/afterEach, and effective mocking strategies"
  },
  {
    "id": 3,
    "topic": "Unit Testing",
    "title": "Advanced Mocking and Testing Asynchronous Code",
    "description": "Learn advanced mocking techniques and how to effectively test asynchronous code, promises, and complex interactions.",
    "codeExample": "// Testing asynchronous code with async/await\nconst apiClient = require('../apiClient');\n\njest.mock('../apiClient');\n\ndescribe('API Service', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  test('fetches user data successfully', async () => {\n    // Arrange\n    const userId = 123;\n    const mockUser = { id: 123, name: 'John Doe', email: 'john@example.com' };\n    apiClient.getUser.mockResolvedValue(mockUser);\n    \n    // Act\n    const user = await apiClient.getUser(userId);\n    \n    // Assert\n    expect(apiClient.getUser).toHaveBeenCalledWith(userId);\n    expect(user).toEqual(mockUser);\n  });\n  \n  test('handles API errors gracefully', async () => {\n    // Arrange\n    const userId = 123;\n    const apiError = new Error('User not found');\n    apiClient.getUser.mockRejectedValue(apiError);\n    \n    // Act & Assert\n    await expect(apiClient.getUser(userId)).rejects.toThrow('User not found');\n  });\n  \n  test('retries failed requests', async () => {\n    // Arrange\n    const userId = 123;\n    const networkError = new Error('Network error');\n    const mockUser = { id: 123, name: 'John Doe' };\n    \n    // First call fails, second succeeds\n    apiClient.getUser\n      .mockRejectedValueOnce(networkError)\n      .mockResolvedValueOnce(mockUser);\n    \n    // Act\n    const user = await apiClient.getUser(userId);\n    \n    // Assert\n    expect(apiClient.getUser).toHaveBeenCalledTimes(2);\n    expect(user).toEqual(mockUser);\n  });\n});\n\n// Mocking modules with complex behavior\nconst fs = require('fs');\nconst fileProcessor = require('../fileProcessor');\n\njest.mock('fs');\n\ndescribe('File Processor', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  test('processes file successfully', async () => {\n    // Arrange\n    const filePath = '/path/to/file.txt';\n    const fileContent = 'Hello, World!';\n    const processedContent = 'HELLO, WORLD!';\n    \n    // Mock fs.readFile to return specific content\n    fs.readFile.mockImplementation((path, encoding, callback) => {\n      callback(null, fileContent);\n    });\n    \n    // Act\n    const result = await fileProcessor.processFile(filePath);\n    \n    // Assert\n    expect(fs.readFile).toHaveBeenCalledWith(\n      filePath, \n      'utf8', \n      expect.any(Function)\n    );\n    expect(result).toBe(processedContent);\n  });\n  \n  test('handles file read errors', async () => {\n    // Arrange\n    const filePath = '/path/to/nonexistent.txt';\n    const fileError = new Error('ENOENT: no such file or directory');\n    \n    fs.readFile.mockImplementation((path, encoding, callback) => {\n      callback(fileError, null);\n    });\n    \n    // Act & Assert\n    await expect(fileProcessor.processFile(filePath)).rejects.toThrow('File processing failed');\n  });\n});\n\n// Testing time-dependent code\njest.useFakeTimers();\n\nfunction delayedGreeting(name, delay) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(`Hello, ${name}!`);\n    }, delay);\n  });\n}\n\ntest('resolves after specified delay', async () => {\n  // Arrange\n  const name = 'John';\n  const delay = 5000;\n  \n  // Act\n  const greetingPromise = delayedGreeting(name, delay);\n  \n  // Fast-forward until all timers are executed\n  jest.advanceTimersByTime(delay);\n  \n  // Assert\n  await expect(greetingPromise).resolves.toBe('Hello, John!');\n});",
    "output": "Advanced testing techniques for asynchronous code, complex mocking scenarios, and time-dependent functionality"
  },
  {
    "id": 4,
    "topic": "Integration Testing",
    "title": "API Testing and Database Integration Tests",
    "description": "Learn how to write comprehensive integration tests for APIs and database interactions, including setup and teardown strategies.",
    "codeExample": "// Testing REST API endpoints with different scenarios\nconst request = require('supertest');\nconst app = require('../app');\nconst db = require('../database');\n\n// Setup and teardown for integration tests\ndescribe('User API Integration Tests', () => {\n  beforeAll(async () => {\n    // Setup database connection\n    await db.connect();\n  });\n  \n  afterAll(async () => {\n    // Close database connection\n    await db.close();\n  });\n  \n  beforeEach(async () => {\n    // Clear test data before each test\n    await db.clearUsers();\n  });\n  \n  describe('POST /api/users', () => {\n    test('creates a new user with valid data', async () => {\n      const userData = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        password: 'password123'\n      };\n      \n      const response = await request(app)\n        .post('/api/users')\n        .send(userData)\n        .expect(201)\n        .expect('Content-Type', /json/);\n        \n      expect(response.body).toMatchObject({\n        id: expect.any(Number),\n        name: userData.name,\n        email: userData.email\n      });\n      \n      // Password should not be returned\n      expect(response.body).not.toHaveProperty('password');\n      \n      // Verify user was actually saved to database\n      const savedUser = await db.findUserById(response.body.id);\n      expect(savedUser).toMatchObject({\n        name: userData.name,\n        email: userData.email\n      });\n    });\n    \n    test('returns 400 for invalid email', async () => {\n      const invalidData = {\n        name: 'John Doe',\n        email: 'invalid-email',\n        password: 'password123'\n      };\n      \n      const response = await request(app)\n        .post('/api/users')\n        .send(invalidData)\n        .expect(400)\n        .expect('Content-Type', /json/);\n        \n      expect(response.body).toHaveProperty('error');\n      \n      // Verify no user was created\n      const users = await db.findAllUsers();\n      expect(users).toHaveLength(0);\n    });\n    \n    test('returns 409 for duplicate email', async () => {\n      // First, create a user\n      await db.createUser({\n        name: 'Existing User',\n        email: 'duplicate@example.com',\n        password: 'password123'\n      });\n      \n      // Try to create another user with same email\n      const userData = {\n        name: 'New User',\n        email: 'duplicate@example.com',\n        password: 'password456'\n      };\n      \n      const response = await request(app)\n        .post('/api/users')\n        .send(userData)\n        .expect(409)\n        .expect('Content-Type', /json/);\n        \n      expect(response.body).toHaveProperty('error', 'Email already exists');\n    });\n  });\n  \n  describe('GET /api/users/:id', () => {\n    test('returns user by ID', async () => {\n      // First, create a user\n      const user = await db.createUser({\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123'\n      });\n      \n      const response = await request(app)\n        .get(`/api/users/${user.id}`)\n        .expect(200)\n        .expect('Content-Type', /json/);\n        \n      expect(response.body).toMatchObject({\n        id: user.id,\n        name: user.name,\n        email: user.email\n      });\n    });\n    \n    test('returns 404 for non-existent user', async () => {\n      await request(app)\n        .get('/api/users/99999')\n        .expect(404);\n    });\n  });\n});",
    "output": "Comprehensive API integration tests covering success cases, validation errors, and edge cases with proper database setup and teardown"
  },
  {
    "id": 5,
    "topic": "End-to-End Testing",
    "title": "Cypress Advanced Patterns and Best Practices",
    "description": "Learn advanced Cypress patterns, custom commands, and best practices for robust end-to-end testing of web applications.",
    "codeExample": "// Cypress E2E test with custom commands and advanced patterns\ndescribe('E-Commerce Application', () => {\n  beforeEach(() => {\n    // Custom command to reset database and seed test data\n    cy.task('seedDatabase');\n    cy.visit('/');\n  });\n  \n  afterEach(() => {\n    // Take screenshot on test failure\n    if (this.currentTest.state === 'failed') {\n      cy.screenshot(`failure-${this.currentTest.title}`);\n    }\n  });\n  \n  it('allows users to complete a purchase flow', () => {\n    // Custom command for login\n    cy.login('user@example.com', 'password123');\n    \n    // Navigate to products page\n    cy.get('[data-cy=nav-products]').click();\n    \n    // Search for a product\n    cy.get('[data-cy=search-input]').type('laptop');\n    cy.get('[data-cy=search-button]').click();\n    \n    // Add product to cart\n    cy.get('[data-cy=product-item]').first().within(() => {\n      cy.get('[data-cy=add-to-cart]').click();\n    });\n    \n    // Go to cart\n    cy.get('[data-cy=cart-link]').click();\n    \n    // Verify cart contents\n    cy.get('[data-cy=cart-items]').should('have.length', 1);\n    cy.get('[data-cy=cart-total]').should('contain', '$999.99');\n    \n    // Proceed to checkout\n    cy.get('[data-cy=checkout-button]').click();\n    \n    // Fill shipping information\n    cy.get('[data-cy=shipping-form]').within(() => {\n      cy.get('[data-cy=first-name]').type('John');\n      cy.get('[data-cy=last-name]').type('Doe');\n      cy.get('[data-cy=address]').type('123 Main St');\n      cy.get('[data-cy=city]').type('New York');\n      cy.get('[data-cy=zip-code]').type('10001');\n      cy.get('[data-cy=submit]').click();\n    });\n    \n    // Confirm order\n    cy.get('[data-cy=order-summary]').should('be.visible');\n    cy.get('[data-cy=confirm-order]').click();\n    \n    // Verify success message\n    cy.get('[data-cy=order-success]').should('contain', 'Order placed successfully');\n    cy.get('[data-cy=order-number]').should('contain', 'ORD-');\n  });\n  \n  it('shows error for invalid coupon code', () => {\n    cy.login('user@example.com', 'password123');\n    \n    // Add item to cart\n    cy.get('[data-cy=nav-products]').click();\n    cy.get('[data-cy=product-item]').first().within(() => {\n      cy.get('[data-cy=add-to-cart]').click();\n    });\n    \n    // Go to cart\n    cy.get('[data-cy=cart-link]').click();\n    \n    // Apply invalid coupon\n    cy.get('[data-cy=coupon-input]').type('INVALID');\n    cy.get('[data-cy=apply-coupon]').click();\n    \n    // Verify error message\n    cy.get('[data-cy=coupon-error]').should('be.visible')\n      .and('contain', 'Invalid coupon code');\n  });\n  \n  it('handles network errors gracefully', () => {\n    // Intercept API calls and simulate network failure\n    cy.intercept('POST', '/api/checkout', {\n      statusCode: 500,\n      body: { error: 'Internal server error' }\n    }).as('checkoutRequest');\n    \n    cy.login('user@example.com', 'password123');\n    \n    // Add item to cart and proceed to checkout\n    cy.get('[data-cy=nav-products]').click();\n    cy.get('[data-cy=product-item]').first().within(() => {\n      cy.get('[data-cy=add-to-cart]').click();\n    });\n    cy.get('[data-cy=cart-link]').click();\n    cy.get('[data-cy=checkout-button]').click();\n    \n    // Fill shipping information\n    cy.get('[data-cy=shipping-form]').within(() => {\n      cy.get('[data-cy=first-name]').type('John');\n      cy.get('[data-cy=last-name]').type('Doe');\n      cy.get('[data-cy=address]').type('123 Main St');\n      cy.get('[data-cy=city]').type('New York');\n      cy.get('[data-cy=zip-code]').type('10001');\n      cy.get('[data-cy=submit]').click();\n    });\n    \n    // Confirm order (will fail due to network error)\n    cy.get('[data-cy=confirm-order]').click();\n    \n    // Verify error handling\n    cy.get('[data-cy=error-message]').should('be.visible')\n      .and('contain', 'Unable to process your order');\n  });\n});\n\n// Custom Cypress commands (in cypress/support/commands.js)\nCypress.Commands.add('login', (email, password) => {\n  cy.visit('/login');\n  cy.get('[data-cy=email]').type(email);\n  cy.get('[data-cy=password]').type(password);\n  cy.get('[data-cy=submit]').click();\n  cy.get('[data-cy=dashboard]').should('be.visible');\n});\n\n// Custom tasks for database operations (in cypress/plugins/index.js)\nmodule.exports = (on, config) => {\n  on('task', {\n    seedDatabase() {\n      // Reset database and insert test data\n      return seedDatabase();\n    },\n    \n    resetDatabase() {\n      // Clear all data\n      return resetDatabase();\n    }\n  });\n};",
    "output": "Advanced end-to-end tests with custom commands, proper error handling, network interception, and comprehensive user flow testing"
  }
]